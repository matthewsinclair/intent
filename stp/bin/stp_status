#!/bin/bash
# stp_status - Sync steel thread status based on Backlog task completion
# Usage: stp status <command> [options] [arguments]

# Exit on error
set -e

# Function to display error messages
error() {
  echo "Error: $1" >&2
  exit 1
}

# Get STP_HOME from environment or determine from script location
if [ -z "$STP_HOME" ]; then
  SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
  export STP_HOME="$(cd "$SCRIPT_DIR/../.." && pwd)"
fi

# Function to display usage
usage() {
  echo "Usage: stp status <command> [options] [arguments]"
  echo ""
  echo "Sync steel thread status based on Backlog task completion"
  echo ""
  echo "Commands:"
  echo "  show <ST####>              Show status of steel thread and its tasks"
  echo "  sync <ST####>              Update steel thread status based on tasks"
  echo "  report                     Generate status report for all active threads"
  echo ""
  echo "Options:"
  echo "  --dry-run                  Show what would be changed without updating"
  echo ""
  echo "Examples:"
  echo "  stp status show ST0014"
  echo "  stp status sync ST0014"
  echo "  stp status report"
}

# Validate steel thread ID format
validate_st_id() {
  local st_id="$1"
  if ! echo "$st_id" | grep -qE '^ST[0-9]{4}$'; then
    echo "Error: Invalid steel thread ID format. Expected: ST####" >&2
    return 1
  fi
  return 0
}

# Get task statistics for a steel thread
get_task_stats() {
  local st_id="$1"
  local total=0
  local done=0
  local in_progress=0
  local todo=0
  local draft=0
  
  # Check each task directory
  for task_file in "$STP_HOME/backlog/tasks"/task-*.md "$STP_HOME/backlog/drafts"/task-*.md; do
    if [ -f "$task_file" ]; then
      # Check if task belongs to this steel thread (in title field)
      if grep -q "^title:.*$st_id" "$task_file"; then
        total=$((total + 1))
        
        # Extract status from file
        status_line=$(grep "^status:" "$task_file" | head -1)
        
        # Normalize and check status
        case "$status_line" in
          *"Done"*|*"done"*) done=$((done + 1)) ;;
          *"In Progress"*|*"in-progress"*) in_progress=$((in_progress + 1)) ;;
          *"To Do"*|*"todo"*) todo=$((todo + 1)) ;;
          *)
            # Check if it's in drafts folder
            case "$task_file" in
              */drafts/*) draft=$((draft + 1)) ;;
              *) todo=$((todo + 1)) ;;  # Default to todo if status unclear
            esac
            ;;
        esac
      fi
    fi
  done
  
  echo "$total $done $in_progress $todo $draft"
}

# Determine steel thread status from task stats
determine_status() {
  local total="$1"
  local done="$2"
  local in_progress="$3"
  local todo="$4"
  local draft="$5"
  
  if [ "$total" -eq 0 ] || [ "$total" -eq "$draft" ]; then
    echo "Not Started"
  elif [ "$done" -eq "$((total - draft))" ] && [ "$done" -gt 0 ]; then
    echo "Completed"
  elif [ "$in_progress" -gt 0 ] || [ "$todo" -gt 0 ]; then
    echo "In Progress"
  else
    echo "Not Started"
  fi
}

# Show status of a steel thread
show_status() {
  local st_id="$1"
  
  validate_st_id "$st_id" || exit 1
  
  # Get steel thread file path
  local st_file=$(find_steel_thread "$st_id")
  if [ -z "$st_file" ]; then
    echo "Error: Steel thread $st_id not found" >&2
    exit 1
  fi
  
  # Get current status from file
  local current_status=$(extract_yaml_field "$st_file" "status")
  echo "Steel Thread: $st_id"
  echo "Current Status: $current_status"
  echo ""
  
  # Get task statistics
  read -r total done in_progress todo draft <<EOF
$(get_task_stats "$st_id")
EOF
  
  echo "Task Summary:"
  echo "  Total Tasks: $total"
  if [ "$total" -gt 0 ]; then
    echo "  - Done: $done"
    echo "  - In Progress: $in_progress"
    echo "  - Todo: $todo"
    if [ "$draft" -gt 0 ]; then
      echo "  - Draft: $draft"
    fi
  fi
  echo ""
  
  # Determine recommended status
  local recommended_status=$(determine_status "$total" "$done" "$in_progress" "$todo" "$draft")
  echo "Recommended Status: $recommended_status"
  
  if [ "$current_status" != "$recommended_status" ]; then
    echo ""
    echo "Status mismatch detected. Run 'stp status sync $st_id' to update."
  fi
}

# Sync steel thread status based on tasks
sync_status() {
  local st_id="$1"
  local dry_run="$2"
  
  validate_st_id "$st_id" || exit 1
  
  # Get steel thread file path
  local st_file=$(find_steel_thread "$st_id")
  if [ -z "$st_file" ]; then
    echo "Error: Steel thread $st_id not found" >&2
    exit 1
  fi
  
  # Get current status
  local current_status=$(extract_yaml_field "$st_file" "status")
  
  # Get task statistics
  read -r total done in_progress todo draft <<EOF
$(get_task_stats "$st_id")
EOF
  
  # Determine new status
  local new_status=$(determine_status "$total" "$done" "$in_progress" "$todo" "$draft")
  
  echo "Steel Thread: $st_id"
  echo "Current Status: $current_status"
  echo "Task Statistics: Total=$total, Done=$done, In Progress=$in_progress, Todo=$todo, Draft=$draft"
  echo "New Status: $new_status"
  
  if [ "$current_status" = "$new_status" ]; then
    echo "Status is already up to date."
    return 0
  fi
  
  if [ "$dry_run" = "true" ]; then
    echo ""
    echo "DRY RUN: Would update status from '$current_status' to '$new_status'"
    return 0
  fi
  
  # Update the status in the file
  echo ""
  echo "Updating status..."
  
  # Create temporary file
  local tmp_file=$(mktemp)
  
  # Update status and completed date if needed
  awk -v new_status="$new_status" -v today="$(date +%Y%m%d)" '
    BEGIN { in_frontmatter = 0; status_updated = 0; completed_updated = 0 }
    /^---$/ { 
      if (in_frontmatter == 0) { 
        in_frontmatter = 1 
      } else { 
        in_frontmatter = 0 
      }
      print
      next
    }
    in_frontmatter && /^status:/ {
      print "status: " new_status
      status_updated = 1
      next
    }
    in_frontmatter && /^completed:/ && new_status == "Completed" {
      print "completed: " today
      completed_updated = 1
      next
    }
    in_frontmatter && /^completed:/ && new_status != "Completed" {
      print "completed: "
      completed_updated = 1
      next
    }
    { print }
  ' "$st_file" > "$tmp_file"
  
  # Move temporary file to original
  mv "$tmp_file" "$st_file"
  
  echo "Status updated successfully."
  
  # Update wip.md if needed
  update_wip_status "$st_id" "$new_status"
}

# Update status in wip.md
update_wip_status() {
  local st_id="$1"
  local new_status="$2"
  local wip_file="$STP_HOME/stp/prj/wip.md"
  
  if [ ! -f "$wip_file" ]; then
    return 0
  fi
  
  # Update status in the tables
  # This is a simplified version - a more robust implementation would parse the tables properly
  echo "Updating wip.md..."
}

# Generate status report for all active threads
generate_report() {
  echo "Steel Thread Status Report"
  echo "========================="
  echo ""
  
  # Get all active steel threads
  local active_threads=$("$STP_HOME/stp/bin/stp" st list | grep -E "(In Progress|Not Started|On Hold)" | awk -F'|' '{print $1}' | grep -E "ST[0-9]{4}")
  
  if [ -z "$active_threads" ]; then
    echo "No active steel threads found."
    return 0
  fi
  
  echo "Active Steel Threads:"
  echo ""
  
  for st_id in $active_threads; do
    st_id=$(echo "$st_id" | tr -d ' ')
    
    # Get task statistics
    read -r total done in_progress todo draft <<EOF
$(get_task_stats "$st_id")
EOF
    
    # Get current status
    local st_file=$(find_steel_thread "$st_id")
    if [ -n "$st_file" ]; then
      local current_status=$(extract_yaml_field "$st_file" "status")
      local title=$(grep "^# $st_id:" "$st_file" | sed "s/^# $st_id: //")
      
      printf "%-8s %-30s %-12s Tasks: %2d (Done: %2d, Active: %2d)\n" \
        "$st_id" "${title:0:30}" "[$current_status]" "$total" "$done" "$((in_progress + todo))"
    fi
  done
  
  echo ""
  echo "Run 'stp status sync <ST####>' to update any steel thread status."
}

# Find steel thread file
find_steel_thread() {
  local st_id="$1"
  local st_file=""
  
  # Check main directory
  if [ -f "$STP_HOME/stp/prj/st/${st_id}.md" ]; then
    st_file="$STP_HOME/stp/prj/st/${st_id}.md"
  # Check subdirectories
  elif [ -f "$STP_HOME/stp/prj/st/COMPLETED/${st_id}.md" ]; then
    st_file="$STP_HOME/stp/prj/st/COMPLETED/${st_id}.md"
  elif [ -f "$STP_HOME/stp/prj/st/NOT-STARTED/${st_id}.md" ]; then
    st_file="$STP_HOME/stp/prj/st/NOT-STARTED/${st_id}.md"
  elif [ -f "$STP_HOME/stp/prj/st/CANCELLED/${st_id}.md" ]; then
    st_file="$STP_HOME/stp/prj/st/CANCELLED/${st_id}.md"
  fi
  
  echo "$st_file"
}

# Extract YAML field value
extract_yaml_field() {
  local file="$1"
  local field="$2"
  
  awk -v field="$field" '
    BEGIN { in_frontmatter = 0; found = 0 }
    /^---$/ { 
      if (in_frontmatter == 0) { 
        in_frontmatter = 1 
      } else { 
        exit 
      }
      next
    }
    in_frontmatter && $0 ~ "^" field ":" {
      sub("^" field ": *", "")
      print
      found = 1
      exit
    }
  ' "$file"
}

# Process dry-run option
DRY_RUN="false"
for arg in "$@"; do
  case "$arg" in
    --dry-run)
      DRY_RUN="true"
      ;;
  esac
done

# Display usage if no arguments provided
if [ $# -eq 0 ]; then
  usage
  exit 0
fi

# Main command processing
case "$1" in
  show)
    shift
    show_status "$@"
    ;;
  sync)
    shift
    # Remove --dry-run from arguments if present
    st_id=""
    for arg in "$@"; do
      case "$arg" in
        --dry-run) ;;
        *) st_id="$arg" ;;
      esac
    done
    sync_status "$st_id" "$DRY_RUN"
    ;;
  report)
    generate_report
    ;;
  -h|--help|help)
    usage
    exit 0
    ;;
  *)
    error "Unknown command: $1. Run 'stp status help' for usage information."
    ;;
esac