#!/bin/bash
# stp_upgrade - Upgrade STP files to the latest format
# Usage: stp upgrade [--force]

# Exit on error
set -e

# Current STP version
CURRENT_VERSION="1.0.0"

# Function to display error messages
error() {
  echo "Error: $1" >&2
  exit 1
}

# Function to display usage information
usage() {
  cat << EOF
Usage: stp upgrade [--force]

Upgrade STP files to the latest format.

This command scans all STP files and brings them up to date with the latest version.
It adds or updates metadata and ensures all files follow the current format standards.

Options:
  --force    Force upgrade even for major version differences

Examples:
  stp upgrade
  stp upgrade --force
EOF
  exit 1
}

# Parse options
FORCE=0
while [ "$#" -gt 0 ]; do
  case "$1" in
    --force)
      FORCE=1
      shift
      ;;
    --help)
      usage
      ;;
    *)
      error "Unknown option: $1"
      ;;
  esac
done

# Load project configuration if available
if [ -f stp/.config/config ]; then
  source stp/.config/config
elif [ -f .stp-config ]; then
  # For backward compatibility
  source .stp-config
fi

echo "Starting STP upgrade process..."
echo "Current STP version: $CURRENT_VERSION"
echo ""

# Function to compare versions
# Returns: 0 if equal, 1 if version1 > version2, 2 if version1 < version2
compare_versions() {
  local version1="$1"
  local version2="$2"
  
  if [ "$version1" = "$version2" ]; then
    return 0
  fi
  
  local IFS=.
  local v1=($version1)
  local v2=($version2)
  
  # Major version comparison
  if [ "${v1[0]:-0}" -gt "${v2[0]:-0}" ]; then
    return 1
  elif [ "${v1[0]:-0}" -lt "${v2[0]:-0}" ]; then
    return 2
  fi
  
  # Minor version comparison
  if [ "${v1[1]:-0}" -gt "${v2[1]:-0}" ]; then
    return 1
  elif [ "${v1[1]:-0}" -lt "${v2[1]:-0}" ]; then
    return 2
  fi
  
  # Patch version comparison
  if [ "${v1[2]:-0}" -gt "${v2[2]:-0}" ]; then
    return 1
  elif [ "${v1[2]:-0}" -lt "${v2[2]:-0}" ]; then
    return 2
  fi
  
  # Equal
  return 0
}

# Function to extract version from a file
get_file_version() {
  local file="$1"
  local version=""
  
  if [ -f "$file" ]; then
    # Try to extract stp_version from YAML frontmatter
    version=$(grep -m 1 "^stp_version:" "$file" | sed "s/^stp_version: *//")
  fi
  
  # If no version found, assume "0.0.0" (pre-versioning)
  if [ -z "$version" ]; then
    version="0.0.0"
  fi
  
  echo "$version"
}

# Function to add/update YAML frontmatter in a file
update_file_frontmatter() {
  local file="$1"
  local temp_file="${file}.tmp"
  
  if [ -f "$file" ]; then
    # Check if file already has YAML frontmatter
    if grep -q "^---" "$file"; then
      # Update existing frontmatter
      awk '
        BEGIN { in_frontmatter = 0; has_version = 0; printed_version = 0; }
        /^---/ {
          if (in_frontmatter == 0) {
            in_frontmatter = 1;
            print "---";
            next;
          } else {
            in_frontmatter = 0;
            if (!has_version) {
              print "stp_version: '"$CURRENT_VERSION"'";
              printed_version = 1;
            }
            print "---";
            next;
          }
        }
        in_frontmatter && /^stp_version:/ {
          print "stp_version: '"$CURRENT_VERSION"'";
          has_version = 1;
          printed_version = 1;
          next;
        }
        { print; }
      ' "$file" > "$temp_file"
    else
      # Add new frontmatter
      echo "---" > "$temp_file"
      echo "stp_version: $CURRENT_VERSION" >> "$temp_file"
      
      # Try to extract information from the file content to create proper frontmatter
      local title=$(grep -m 1 "^# " "$file" | sed "s/^# //")
      local author=$(grep -m 1 "^\- \*\*Author\*\*:" "$file" | sed "s/^\- \*\*Author\*\*: //")
      local status=$(grep -m 1 "^\- \*\*Status\*\*:" "$file" | sed "s/^\- \*\*Status\*\*: //")
      local created=$(grep -m 1 "^\- \*\*Created\*\*:" "$file" | sed "s/^\- \*\*Created\*\*: //")
      local completed=$(grep -m 1 "^\- \*\*Completed\*\*:" "$file" | sed "s/^\- \*\*Completed\*\*: //")
      
      # Format dates for frontmatter if found
      if [ -n "$created" ]; then
        # Convert YYYY-MM-DD to YYYYMMDD if needed
        if [[ "$created" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; then
          created=$(echo "$created" | tr -d '-')
        fi
        echo "created: $created" >> "$temp_file"
      fi
      
      if [ -n "$completed" ] && [ "$completed" != "YYYY-MM-DD" ] && [ -z "$(echo "$completed" | tr -d '[:space:]')" ]; then
        # Convert YYYY-MM-DD to YYYYMMDD if needed
        if [[ "$completed" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; then
          completed=$(echo "$completed" | tr -d '-')
        fi
        echo "completed: $completed" >> "$temp_file"
      else
        echo "completed: " >> "$temp_file"
      fi
      
      if [ -n "$status" ]; then
        echo "status: $status" >> "$temp_file"
      fi
      
      # Add verblock if possible
      if [ -n "$author" ]; then
        echo "verblock: \"$(date '+%d %b %Y'):v0.1: $author - Updated via STP upgrade\"" >> "$temp_file"
      else
        echo "verblock: \"$(date '+%d %b %Y'):v0.1: STP upgrade\"" >> "$temp_file"
      fi
      
      echo "---" >> "$temp_file"
      cat "$file" >> "$temp_file"
    fi
    
    # Replace the original file
    mv "$temp_file" "$file"
    echo "Updated: $file"
  fi
}

# Function to upgrade section markers in steel_threads.md
upgrade_section_markers() {
  local file="stp/prj/st/steel_threads.md"
  local temp_file=$(mktemp)
  
  if [ -f "$file" ]; then
    # Check if file already has section markers
    if grep -q "BEGIN: STEEL_THREAD_INDEX" "$file"; then
      echo "Section markers already present in $file"
    else
      # Add section markers
      awk '
        /^## Index/ {
          print;
          print "";
          print "<!-- BEGIN: STEEL_THREAD_INDEX -->";
          in_index = 1;
          next;
        }
        /^##/ && in_index {
          print "<!-- END: STEEL_THREAD_INDEX -->";
          print "";
          in_index = 0;
          print;
          next;
        }
        { print; }
        END {
          if (in_index) {
            print "<!-- END: STEEL_THREAD_INDEX -->";
          }
        }
      ' "$file" > "$temp_file"
      
      # Replace the original file
      mv "$temp_file" "$file"
      echo "Added section markers to $file"
    fi
  fi
}

# Scan directories for STP files to upgrade
echo "Scanning for STP files to upgrade..."

# Check for steel threads directory
if [ -d "stp/prj/st" ]; then
  # Upgrade steel_threads.md
  echo "Checking steel_threads.md..."
  upgrade_section_markers
  
  # Process all steel thread files
  echo "Upgrading steel thread files..."
  for st_file in stp/prj/st/ST*.md; do
    if [ -f "$st_file" ]; then
      file_version=$(get_file_version "$st_file")
      echo "Processing $st_file (current version: $file_version)"
      
      # Compare versions
      compare_versions "$CURRENT_VERSION" "$file_version"
      comparison=$?
      
      if [ $comparison -eq 0 ]; then
        echo "  Already at latest version, no update needed."
      elif [ $comparison -eq 1 ]; then
        # Current version is newer
        major_current=$(echo $CURRENT_VERSION | cut -d. -f1)
        major_file=$(echo $file_version | cut -d. -f1)
        
        if [ $major_current -gt $major_file ] && [ $FORCE -eq 0 ]; then
          echo "  Warning: File uses major version $major_file, current is $major_current."
          echo "  Use --force to upgrade this file."
        else
          update_file_frontmatter "$st_file"
        fi
      else
        # File version is newer
        echo "  Warning: File version ($file_version) is newer than current version ($CURRENT_VERSION)."
        echo "  This may indicate the file was created with a newer version of STP."
      fi
    fi
  done
  
  # Run sync to update the steel_threads.md file
  if [ -x "./stp/bin/stp_st" ]; then
    echo ""
    echo "Running sync to update steel_threads.md..."
    ./stp/bin/stp_st sync --write
  elif [ -n "$STP_HOME" ] && [ -x "$STP_HOME/stp/bin/stp_st" ]; then
    echo ""
    echo "Running sync to update steel_threads.md..."
    "$STP_HOME/stp/bin/stp_st" sync --write
  fi
else
  echo "No stp/prj/st directory found. Steel threads upgrade skipped."
fi

echo ""
echo "STP upgrade complete."