#!/bin/bash
# stp_migrate - Migrate embedded tasks from steel threads to Backlog
# Usage: stp migrate [options] <ST####>

# Exit on error
set -e

# Function to display error messages
error() {
  echo "Error: $1" >&2
  exit 1
}

# Get STP_HOME from environment or determine from script location
if [ -z "$STP_HOME" ]; then
  SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
  export STP_HOME="$(cd "$SCRIPT_DIR/../.." && pwd)"
fi

# Check if backlog is installed
if ! command -v backlog &> /dev/null; then
  echo "Error: Backlog.md is not installed" >&2
  echo "" >&2
  cat "$STP_HOME/stp/bin/.help/backlog-install.help.md" >&2
  exit 1
fi

# Function to display usage
usage() {
  echo "Usage: stp migrate [options] <ST####>"
  echo ""
  echo "Migrate embedded tasks from steel threads to Backlog.md"
  echo ""
  echo "Arguments:"
  echo "  ST####                     Steel thread ID to migrate"
  echo ""
  echo "Options:"
  echo "  --all-active               Migrate all active steel threads"
  echo "  --dry-run                  Show what would be migrated without creating tasks"
  echo ""
  echo "Examples:"
  echo "  stp migrate ST0014"
  echo "  stp migrate --dry-run ST0014"
  echo "  stp migrate --all-active"
}

# Validate steel thread ID format
validate_st_id() {
  local st_id="$1"
  if ! echo "$st_id" | grep -qE '^ST[0-9]{4}$'; then
    echo "Error: Invalid steel thread ID format. Expected: ST####" >&2
    return 1
  fi
  return 0
}

# Find steel thread file
find_steel_thread() {
  local st_id="$1"
  local st_file=""
  
  # Check main directory
  if [ -f "$STP_HOME/stp/prj/st/${st_id}.md" ]; then
    st_file="$STP_HOME/stp/prj/st/${st_id}.md"
  # Check subdirectories
  elif [ -f "$STP_HOME/stp/prj/st/COMPLETED/${st_id}.md" ]; then
    st_file="$STP_HOME/stp/prj/st/COMPLETED/${st_id}.md"
  elif [ -f "$STP_HOME/stp/prj/st/NOT-STARTED/${st_id}.md" ]; then
    st_file="$STP_HOME/stp/prj/st/NOT-STARTED/${st_id}.md"
  elif [ -f "$STP_HOME/stp/prj/st/CANCELLED/${st_id}.md" ]; then
    st_file="$STP_HOME/stp/prj/st/CANCELLED/${st_id}.md"
  fi
  
  echo "$st_file"
}

# Extract tasks from markdown file
extract_tasks() {
  local file="$1"
  local st_id="$2"
  
  # Extract checkbox tasks from the Tasks section
  awk -v st_id="$st_id" '
    BEGIN { in_tasks = 0; task_num = 0 }
    /^## Tasks/ { in_tasks = 1; next }
    /^##[^#]/ && in_tasks { exit }
    in_tasks && /^- \[[ x]\]/ {
      task_num++
      # Extract checkbox state and task description
      line = $0
      if (match(line, /^- \[.\] /)) {
        # Get the checkbox state
        checkbox = substr(line, 4, 1)
        status = (checkbox == "x") ? "done" : "todo"
        
        # Get the description (everything after the checkbox)
        description = substr(line, 7)
        
        # Clean up the description
        gsub(/^[[:space:]]+|[[:space:]]+$/, "", description)
        
        # Output in format: task_num|status|description
        printf "%d|%s|%s\n", task_num, status, description
      }
    }
  ' "$file"
}

# Create a Backlog task
create_backlog_task() {
  local st_id="$1"
  local description="$2"
  local status="$3"
  local dry_run="$4"
  
  local title="$st_id - $description"
  
  if [ "$dry_run" = "true" ]; then
    echo "  [DRY RUN] Would create task: $title (status: $status)"
    return 0
  fi
  
  echo "  Creating task: $title"
  
  # Use stp bl wrapper to create the task
  if output=$("$STP_HOME/stp/bin/stp" bl create "$st_id" "$description" 2>&1); then
    # Extract task ID from output
    task_id=$(echo "$output" | grep -oE "task-[0-9]+" | head -1)
    
    if [ -n "$task_id" ] && [ "$status" = "done" ]; then
      # Update status to Done (capital D for Backlog)
      "$STP_HOME/stp/bin/stp" bl task edit "$task_id" --status Done >/dev/null 2>&1
      echo "    Task created and marked as done: $task_id"
    else
      echo "    Task created: $task_id"
    fi
  else
    echo "    Error creating task: $output" >&2
    return 1
  fi
}

# Update steel thread to remove tasks section
update_steel_thread() {
  local file="$1"
  local st_id="$2"
  local dry_run="$3"
  
  if [ "$dry_run" = "true" ]; then
    echo "  [DRY RUN] Would update $st_id to reference Backlog tasks"
    return 0
  fi
  
  echo "  Updating steel thread to reference Backlog..."
  
  # Create temporary file
  local tmp_file=$(mktemp)
  
  # Process the file
  awk '
    BEGIN { in_tasks = 0; tasks_replaced = 0 }
    /^## Tasks/ { 
      print $0
      print "Tasks are tracked in Backlog. View with: `stp task list '"$st_id"'`"
      print ""
      in_tasks = 1
      tasks_replaced = 1
      next
    }
    /^##[^#]/ && in_tasks { 
      in_tasks = 0
      print $0
      next
    }
    !in_tasks { print $0 }
  ' "$file" > "$tmp_file"
  
  # Move temporary file to original
  mv "$tmp_file" "$file"
  
  echo "    Steel thread updated"
}

# Migrate a single steel thread
migrate_steel_thread() {
  local st_id="$1"
  local dry_run="$2"
  
  validate_st_id "$st_id" || return 1
  
  # Find the steel thread file
  local st_file=$(find_steel_thread "$st_id")
  if [ -z "$st_file" ]; then
    echo "Error: Steel thread $st_id not found" >&2
    return 1
  fi
  
  echo "Migrating $st_id..."
  
  # Extract tasks
  local tasks=$(extract_tasks "$st_file" "$st_id")
  
  if [ -z "$tasks" ]; then
    echo "  No tasks found to migrate"
    return 0
  fi
  
  # Count tasks
  local task_count=$(echo "$tasks" | wc -l)
  echo "  Found $task_count tasks to migrate"
  
  # Create Backlog tasks
  local created=0
  local failed=0
  
  echo "$tasks" | while IFS='|' read -r num status description; do
    if create_backlog_task "$st_id" "$description" "$status" "$dry_run"; then
      created=$((created + 1))
    else
      failed=$((failed + 1))
    fi
  done
  
  # Update the steel thread file
  if [ "$failed" -eq 0 ]; then
    update_steel_thread "$st_file" "$st_id" "$dry_run"
  else
    echo "  Warning: Some tasks failed to create. Steel thread not updated."
  fi
  
  echo "  Migration complete"
  echo ""
}

# Get all active steel threads
get_active_threads() {
  # Get threads that are In Progress, Not Started, or On Hold
  "$STP_HOME/stp/bin/stp" st list | grep -E "(In Progress|Not Started|On Hold)" | awk -F'|' '{print $1}' | grep -oE "ST[0-9]{4}"
}

# Main processing
DRY_RUN="false"
ALL_ACTIVE="false"
ST_ID=""

# Parse arguments
while [ $# -gt 0 ]; do
  case "$1" in
    -h|--help|help)
      usage
      exit 0
      ;;
    --dry-run)
      DRY_RUN="true"
      shift
      ;;
    --all-active)
      ALL_ACTIVE="true"
      shift
      ;;
    ST[0-9][0-9][0-9][0-9])
      ST_ID="$1"
      shift
      ;;
    *)
      # Check if it looks like a steel thread ID attempt
      if echo "$1" | grep -qE '^ST'; then
        validate_st_id "$1" || exit 1
      else
        error "Unknown argument: $1. Run 'stp migrate help' for usage information."
      fi
      ;;
  esac
done

# Validate arguments
if [ "$ALL_ACTIVE" = "true" ] && [ -n "$ST_ID" ]; then
  error "Cannot specify both --all-active and a specific steel thread"
fi

if [ "$ALL_ACTIVE" = "false" ] && [ -z "$ST_ID" ]; then
  usage
  exit 1
fi

# Run migration
if [ "$DRY_RUN" = "true" ]; then
  echo "DRY RUN MODE - No changes will be made"
  echo ""
fi

if [ "$ALL_ACTIVE" = "true" ]; then
  echo "Migrating all active steel threads..."
  echo ""
  
  active_threads=$(get_active_threads)
  if [ -z "$active_threads" ]; then
    echo "No active steel threads found"
    exit 0
  fi
  
  for st_id in $active_threads; do
    migrate_steel_thread "$st_id" "$DRY_RUN"
  done
else
  migrate_steel_thread "$ST_ID" "$DRY_RUN"
fi

echo "Migration process complete"