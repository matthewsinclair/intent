defmodule <%= module_prefix %>.<%= module_name %> do
  @moduledoc """
  Boundary layer GenServer for <%= module_name %>.
  
  This module manages state and side effects while delegating
  business logic to the functional core.
  
  Generated by Worker-Bee Agent on <%= timestamp %>
  """

  use GenServer

  alias <%= module_prefix %>.<%= module_name %>Core

  @type state :: map()

  # Client API

  @doc """
  Starts the <%= module_name %> server.
  """
  @spec start_link(keyword()) :: GenServer.on_start()
  def start_link(opts \\ []) do
    name = Keyword.get(opts, :name, __MODULE__)
    GenServer.start_link(__MODULE__, opts, name: name)
  end

  @doc """
  Gets the current state.
  """
  @spec get_state(GenServer.server()) :: state()
  def get_state(server \\ __MODULE__) do
    GenServer.call(server, :get_state)
  end

  # Server Callbacks

  @impl true
  def init(opts) do
    initial_state = %{
      # Initialize state here
    }
    
    {:ok, initial_state}
  end

  @impl true
  def handle_call(:get_state, _from, state) do
    {:reply, state, state}
  end

  @impl true
  def handle_cast({:async_operation, params}, state) do
    # Handle async operations
    {:noreply, state}
  end

  @impl true
  def handle_info(msg, state) do
    # Handle info messages
    {:noreply, state}
  end
end