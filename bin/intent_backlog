#!/bin/bash
# intent_backlog - Wrapper for Backlog.md task management integration
# Usage: intent backlog <command> [options] [arguments]
# Also available as: intent bl <command> [options] [arguments]

# Exit on error
set -e

# Function to display error messages
error() {
  echo "Error: $1" >&2
  exit 1
}

# Get script directory first
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Get INTENT_HOME from environment or determine from script location
if [ -z "$INTENT_HOME" ]; then
  export INTENT_HOME="$(cd "$SCRIPT_DIR/.." && pwd)"
fi

# Source configuration helpers
source "$SCRIPT_DIR/intent_config"

# Load configuration
load_intent_config

# Check if backlog is installed
if ! command -v backlog &> /dev/null; then
  echo "Error: Backlog.md is not installed" >&2
  echo "" >&2
  cat "$INTENT_HOME/bin/.help/backlog-install.help.md" >&2
  exit 1
fi

# Valid backlog statuses
VALID_BACKLOG_STATUSES=("todo" "wip" "done" "cancelled" "archived")

# Function to validate backlog status
validate_backlog_status() {
  local status="$1"
  for valid_status in "${VALID_BACKLOG_STATUSES[@]}"; do
    if [ "$status" = "$valid_status" ]; then
      return 0
    fi
  done
  return 1
}

# Function to display usage
usage() {
  echo "Usage: intent backlog <command> [options] [arguments]"
  echo "       intent bl <command> [options] [arguments]"
  echo ""
  echo "Intent wrapper for Backlog.md task management"
  echo ""
  echo "Commands:"
  echo "  init                       Initialize backlog in current project"
  echo "  task <subcommand>          Task management (create, list, edit, etc.)"
  echo "  list                       List tasks (uses backlog_list_status filter from config)"
  echo "  create <ST####> <title>    Create a task linked to a steel thread"
  echo "  board                      Display tasks in Kanban board"
  echo "  config                     Manage backlog configuration"
  echo "  browser                    Open browser interface"
  echo ""
  echo "This wrapper:"
  echo "  - Automatically uses --plain for list commands to avoid git errors"
  echo "  - Disables remote operations for local projects"
  echo "  - Provides shortcuts for common Intent workflows"
  echo ""
  echo "Examples:"
  echo "  intent bl list                    # List tasks matching backlog_list_status"
  echo "  intent bl list --all              # List all tasks regardless of status"
  echo "  intent bl list -s todo            # List only todo tasks"
  echo "  intent bl create ST0014 \"Fix bug\" # Create task linked to ST0014"
  echo "  intent bl task edit task-5        # Edit a specific task"
  echo ""
  echo "For full backlog documentation, run: backlog help"
}

# Initialize backlog with STP-friendly defaults
init_backlog() {
  # Run backlog init
  backlog init "$@"
  
  # Configure for local use
  if [ -f "backlog/config.yml" ]; then
    echo "Configuring backlog for Intent integration..."
    # Disable remote operations to prevent git fetch errors
    backlog config set remoteOperations false >/dev/null 2>&1 || true
    # Set default status to match Intent conventions
    backlog config set defaultStatus "To Do" >/dev/null 2>&1 || true
    echo "Backlog configured for local Intent use."
  fi
}

# Create a task with Intent conventions
create_task() {
  local st_id="$1"
  local title="$2"
  
  if [ -z "$st_id" ] || [ -z "$title" ]; then
    error "Usage: intent bl create <ST####> <title>"
  fi
  
  # Validate steel thread ID format
  if ! echo "$st_id" | grep -qE '^ST[0-9]{4}$'; then
    error "Invalid steel thread ID format. Expected: ST####"
  fi
  
  # Create the task with full title
  local full_title="$st_id - $title"
  backlog task create "$full_title"
}

# Process commands
case "${1:-}" in
  init)
    shift
    init_backlog "$@"
    ;;
  
  list)
    # Shortcut for 'task list --plain'
    shift
    
    # Get default status from config
    default_status="${BACKLOG_LIST_STATUS:-}"
    
    # If config has a default status, validate it
    if [ -n "$default_status" ]; then
      if ! validate_backlog_status "$default_status"; then
        echo "Warning: Invalid backlog_list_status '$default_status' in config. Valid statuses are: ${VALID_BACKLOG_STATUSES[*]}" >&2
        default_status=""
      fi
    fi
    
    # Check if user provided -s option or --all
    has_status_filter=false
    show_all=false
    for arg in "$@"; do
      if [ "$arg" = "-s" ] || [ "$arg" = "--status" ]; then
        has_status_filter=true
      elif [ "$arg" = "--all" ]; then
        show_all=true
      fi
    done
    
    # Build command
    cmd_args=()
    
    # Add --plain if not already present
    if ! echo "$@" | grep -q -- "--plain"; then
      cmd_args+=("--plain")
    fi
    
    # Add default status filter if no status filter provided and we have a default
    # But skip if --all is provided
    if [ "$has_status_filter" = false ] && [ "$show_all" = false ] && [ -n "$default_status" ]; then
      cmd_args+=("-s" "$default_status")
    fi
    
    # Add all user arguments except --all
    for arg in "$@"; do
      if [ "$arg" != "--all" ]; then
        cmd_args+=("$arg")
      fi
    done
    
    # Execute backlog command
    backlog task list "${cmd_args[@]}"
    ;;
  
  create)
    # Special STP create command
    shift
    create_task "$@"
    ;;
  
  board)
    shift
    # Pass through board command without modification
    # Note: board doesn't support --plain option
    backlog board "$@"
    ;;
  
  task|tasks)
    # Handle task subcommands
    subcommand="${2:-}"
    case "$subcommand" in
      list)
        # Add --plain to task list
        shift 2
        
        # Get default status from config
        default_status="${BACKLOG_LIST_STATUS:-}"
        
        # If config has a default status, validate it
        if [ -n "$default_status" ]; then
          if ! validate_backlog_status "$default_status"; then
            echo "Warning: Invalid backlog_list_status '$default_status' in config. Valid statuses are: ${VALID_BACKLOG_STATUSES[*]}" >&2
            default_status=""
          fi
        fi
        
        # Check if user provided -s option or --all
        has_status_filter=false
        show_all=false
        for arg in "$@"; do
          if [ "$arg" = "-s" ] || [ "$arg" = "--status" ]; then
            has_status_filter=true
          elif [ "$arg" = "--all" ]; then
            show_all=true
          fi
        done
        
        # Build command
        cmd_args=()
        
        # Add --plain if not already present
        if ! echo "$@" | grep -q -- "--plain"; then
          cmd_args+=("--plain")
        fi
        
        # Add default status filter if no status filter provided and we have a default
        # But skip if --all is provided
        if [ "$has_status_filter" = false ] && [ "$show_all" = false ] && [ -n "$default_status" ]; then
          cmd_args+=("-s" "$default_status")
        fi
        
        # Add all user arguments except --all
        for arg in "$@"; do
          if [ "$arg" != "--all" ]; then
            cmd_args+=("$arg")
          fi
        done
        
        # Execute backlog command
        backlog task list "${cmd_args[@]}"
        ;;
      *)
        # Pass through other task commands
        shift
        backlog task "$@"
        ;;
    esac
    ;;
  
  config)
    # Pass through config commands
    shift
    backlog config "$@"
    ;;
  
  browser)
    # Pass through browser command
    shift
    backlog browser "$@"
    ;;
  
  -h|--help|help|"")
    usage
    exit 0
    ;;
  
  *)
    # Pass through any other commands
    backlog "$@"
    ;;
esac