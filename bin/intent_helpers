#!/bin/bash
# intent_helpers - Shared functions for Intent migration and utilities

# Get Intent version from VERSION file
get_intent_version() {
  local version_file="${INTENT_HOME:-$(dirname "${BASH_SOURCE[0]}")/..}/VERSION"
  
  if [ -f "$version_file" ]; then
    cat "$version_file"
  else
    # Fallback version if VERSION file doesn't exist
    echo "2.2.1"
  fi
}

# Export for use by other scripts
export -f get_intent_version

# Convert YAML frontmatter to JSON format
convert_yaml_frontmatter() {
  local file=$1
  local temp_file="${file}.tmp"
  
  # Check if file has YAML frontmatter
  if ! head -1 "$file" | grep -q "^---$"; then
    # No frontmatter, just copy the file to .tmp
    cp "$file" "$temp_file"
    return 0
  fi
  
  # Extract frontmatter and content
  local in_frontmatter=false
  local frontmatter=""
  local content=""
  local line_num=0
  
  while IFS= read -r line; do
    ((line_num++))
    if [ $line_num -eq 1 ] && [ "$line" = "---" ]; then
      in_frontmatter=true
    elif [ "$in_frontmatter" = true ] && [ "$line" = "---" ]; then
      in_frontmatter=false
    elif [ "$in_frontmatter" = true ]; then
      frontmatter="${frontmatter}${line}
"
    else
      content="${content}${line}
"
    fi
  done < "$file"
  
  # Convert common fields
  echo "---" > "$temp_file"
  
  # Extract and convert fields using more flexible parsing
  while IFS= read -r line; do
    if echo "$line" | grep -q "^stp_version:"; then
      # Convert stp_version to intent_version
      local version=$(echo "$line" | sed 's/stp_version:[[:space:]]*//')
      echo "intent_version: 2.0.0" >> "$temp_file"
    elif echo "$line" | grep -qE "^(verblock|status|created|completed|author):"; then
      # Keep these fields as-is
      echo "$line" >> "$temp_file"
    fi
  done <<< "$frontmatter"
  
  echo "---" >> "$temp_file"
  printf "%b" "$content" >> "$temp_file"
  
  # Replace original file
  mv "$temp_file" "$file"
}

# Update stp_version to intent_version in frontmatter
update_version_in_frontmatter() {
  local file=$1
  
  if [ ! -f "$file" ]; then
    return 1
  fi
  
  # Use sed to replace stp_version with intent_version
  if grep -q "^stp_version:" "$file"; then
    sed -i.bak 's/^stp_version:/intent_version:/' "$file"
    rm -f "${file}.bak"
  fi
}

# Convert YAML config to JSON config
convert_yaml_config_to_json() {
  local yaml_file=$1
  local json_file=$2
  
  # For .stp-config files, we need custom parsing
  if [ "$(basename "$yaml_file")" = ".stp-config" ]; then
    {
      echo "{"
      
      # Parse common fields from .stp-config
      local first=true
      while IFS= read -r line; do
        # Skip comments and empty lines
        if echo "$line" | grep -qE "^#|^$"; then
          continue
        fi
        
        # Extract key-value pairs
        if echo "$line" | grep -q ":"; then
          local key=$(echo "$line" | cut -d: -f1 | tr -d ' ')
          local value=$(echo "$line" | cut -d: -f2- | sed 's/^ *//' | tr -d '"')
          
          # Map old keys to new ones
          case "$key" in
            project_name)
              [ "$first" = false ] && echo ","
              echo -n "  \"project\": \"$value\""
              first=false
              ;;
            author)
              [ "$first" = false ] && echo ","
              echo -n "  \"author\": \"$value\""
              first=false
              ;;
            stp_dir|st_dir)
              # Skip these, we use standard names
              ;;
            editor)
              [ "$first" = false ] && echo ","
              echo -n "  \"editor\": \"$value\""
              first=false
              ;;
            default_status)
              # Skip, not used in v2.0.0
              ;;
          esac
        fi
      done < "$yaml_file"
      
      # Add standard v2.0.0 fields
      [ "$first" = false ] && echo ","
      echo "  \"intent_version\": \"2.0.0\","
      echo "  \"intent_dir\": \"intent\","
      echo "  \"backlog_dir\": \"backlog\""
      
      echo "}"
    } > "$json_file"
  else
    # For other YAML files, try to use yq if available
    if command -v yq >/dev/null 2>&1; then
      yq -o json "$yaml_file" > "$json_file"
    else
      # Fallback: create minimal JSON
      echo "{" > "$json_file"
      echo "  \"intent_version\": \"2.0.0\"," >> "$json_file"
      echo "  \"intent_dir\": \"intent\"," >> "$json_file"
      echo "  \"backlog_dir\": \"backlog\"" >> "$json_file"
      echo "}" >> "$json_file"
    fi
  fi
}

# Create standard v2.0.0+ directory structure
create_v2_directory_structure() {
  local project_root=$1
  
  # Create directories
  mkdir -p "$project_root/.intent"
  mkdir -p "$project_root/intent/st/COMPLETED"
  mkdir -p "$project_root/intent/st/NOT-STARTED"
  mkdir -p "$project_root/intent/st/CANCELLED"
  mkdir -p "$project_root/intent/eng/tpd"
  mkdir -p "$project_root/intent/ref"
  mkdir -p "$project_root/intent/llm"
  mkdir -p "$project_root/backlog"
  
  # Create .gitignore if it doesn't exist
  if [ ! -f "$project_root/.gitignore" ]; then
    cat > "$project_root/.gitignore" << 'EOF'
# Intent/STP specific
.intent/local.json
*.bak
.backup_*

# Backlog.md
backlog/.backlog-md/

# OS specific
.DS_Store
Thumbs.db

# Editor specific
*.swp
*.swo
*~
.vscode/
.idea/
EOF
  fi
}

# Flatten nested directory structure
flatten_directory_structure() {
  local old_base=$1  # e.g., stp/prj/st
  local new_base=$2  # e.g., intent/st
  
  if [ ! -d "$old_base" ]; then
    return 0
  fi
  
  # Create new base directory
  mkdir -p "$new_base"
  
  # Move all contents
  if [ -n "$(ls -A "$old_base")" ]; then
    mv "$old_base"/* "$new_base/" 2>/dev/null || true
    mv "$old_base"/.[!.]* "$new_base/" 2>/dev/null || true
  fi
}

# Detect current STP/Intent version
detect_project_version() {
  local project_root=${1:-.}
  
  # Check for v2.0.0+ (Intent)
  if [ -f "$project_root/.intent/config.json" ]; then
    # Try intent_version first, then version field
    local version=$(jq -r '.intent_version // .version // empty' "$project_root/.intent/config.json" 2>/dev/null)
    if [ -n "$version" ]; then
      echo "$version"
      return 0
    fi
  fi
  
  # Check for v1.2.0+ (version file)
  if [ -f "$project_root/stp/.config/version" ]; then
    local version=$(grep "^stp_version:" "$project_root/stp/.config/version" | sed 's/stp_version:[[:space:]]*//')
    if [ -n "$version" ]; then
      echo "$version"
      return 0
    fi
  fi
  
  # Check for v0.0.0 (.stp-config)
  if [ -f "$project_root/.stp-config" ]; then
    echo "0.0.0"
    return 0
  fi
  
  # Check for directory structure patterns
  if [ -d "$project_root/stp/prj/st" ]; then
    # Has STP structure but no version - assume 1.0.0
    echo "1.0.0"
    return 0
  fi
  
  # Unable to determine version
  return 1
}

# Create backup of project
create_project_backup() {
  local project_root=$1
  local backup_dir=".backup_$(date +%Y%m%d_%H%M%S)"
  
  echo "Creating backup in $backup_dir..."
  mkdir -p "$project_root/$backup_dir"
  
  # Create backup manifest
  {
    echo "Backup created: $(date)"
    echo "Original version: $(detect_project_version "$project_root" || echo "unknown")"
    echo "Files backed up:"
  } > "$project_root/$backup_dir/manifest.txt"
  
  # Backup relevant directories and files
  for item in stp .stp-config .intent intent backlog; do
    if [ -e "$project_root/$item" ]; then
      echo "Backing up $item..."
      cp -r "$project_root/$item" "$project_root/$backup_dir/"
      echo "  $item" >> "$project_root/$backup_dir/manifest.txt"
    fi
  done
  
  echo "$backup_dir"
}

# Check if migration is needed
needs_migration() {
  local version=$1
  
  # Already at v2.0.0
  if [ "$version" = "2.0.0" ]; then
    return 1
  fi
  
  # All other versions need migration
  return 0
}

# Display migration summary
show_migration_summary() {
  local from_version=$1
  local file_count=$2
  local backup_dir=$3
  
  echo ""
  echo "Migration Summary:"
  echo "  From version: $from_version"
  echo "  To version: 2.0.0"
  echo "  Files affected: $file_count"
  echo "  Backup location: $backup_dir"
  echo ""
}

# Count files that will be migrated
count_migration_files() {
  local project_root=$1
  local count=0
  
  # Count Markdown files
  if [ -d "$project_root/stp" ]; then
    count=$(find "$project_root/stp" -name "*.md" -type f | wc -l)
  fi
  
  # Add config files
  [ -f "$project_root/.stp-config" ] && ((count++))
  [ -f "$project_root/stp/.config/version" ] && ((count++))
  
  echo $count
}

# Alias for compatibility
detect_stp_version() {
  detect_project_version "$@"
}

# Check if needs v2 migration
needs_v2_migration() {
  local version=$1
  
  case "$version" in
    "2.0.0"|"2.1.0"|"2.2.0"|"2.2.1")
      return 1  # Already v2
      ;;
    *)
      return 0  # Needs migration
      ;;
  esac
}

# Check if needs 2.1.0 upgrade (agent initialization)
needs_v2_1_upgrade() {
  local version=$1
  
  case "$version" in
    "2.0.0")
      return 0  # Needs agent initialization
      ;;
    *)
      return 1  # Already upgraded or too old
      ;;
  esac
}

# Check if needs 2.2.0 upgrade (fileindex command)
needs_v2_2_upgrade() {
  local version=$1
  
  case "$version" in
    "2.0.0"|"2.1.0")
      return 0  # Needs fileindex upgrade
      ;;
    *)
      return 1  # Already upgraded or too old
      ;;
  esac
}

# Migrate v0.0.0 to v2.0.0
migrate_v0_to_v2() {
  local project_root=$1
  
  echo "Migrating v0.0.0 structure..."
  
  # Create new structure
  mkdir -p "$project_root/intent/st"
  mkdir -p "$project_root/intent/docs"
  
  # Migrate steel threads
  if [ -d "$project_root/stp/prj/st" ]; then
    for file in "$project_root/stp/prj/st"/ST*.md; do
      if [ -f "$file" ]; then
        local basename=$(basename "$file" .md)
        echo "  Migrating $basename..."
        mkdir -p "$project_root/intent/st/$basename"
        convert_yaml_frontmatter "$file"
        mv "$file.tmp" "$project_root/intent/st/$basename/info.md"
      fi
    done
  fi
  
  # Migrate other known files
  [ -f "$project_root/stp/prj/wip.md" ] && cp "$project_root/stp/prj/wip.md" "$project_root/intent/wip.md"
  [ -f "$project_root/stp/eng/tpd/technical_product_design.md" ] && cp "$project_root/stp/eng/tpd/technical_product_design.md" "$project_root/intent/docs/"
  
  # Migrate ALL remaining content to ensure nothing is left behind
  migrate_remaining_content "$project_root"
  
  # Create config
  local project_name=$(basename "$project_root")
  local author="${USER:-Unknown}"
  local target_version="$(get_intent_version 2>/dev/null || echo "2.2.1")"
  
  cat > "$project_root/.intent/config.json" << EOF
{
  "version": "$target_version",
  "project_name": "$project_name",
  "author": "$author",
  "created": "$(date +%Y-%m-%d)",
  "st_prefix": "ST"
}
EOF
}

# Migrate v1.2.0 to v2.0.0
migrate_v1_2_0_to_v2() {
  local project_root=$1
  
  echo "Migrating v1.2.0 structure..."
  
  # Migrate steel threads (flat files)
  if [ -d "$project_root/stp/prj/st" ]; then
    for file in "$project_root/stp/prj/st"/ST*.md; do
      if [ -f "$file" ]; then
        local basename=$(basename "$file" .md)
        echo "  Migrating $basename..."
        mkdir -p "$project_root/intent/st/$basename"
        convert_yaml_frontmatter "$file"
        mv "$file.tmp" "$project_root/intent/st/$basename/info.md"
      fi
    done
  fi
  
  # Migrate other known content
  flatten_directory_structure "$project_root/stp/prj" "$project_root/intent"
  flatten_directory_structure "$project_root/stp/eng/tpd" "$project_root/intent/docs"
  flatten_directory_structure "$project_root/stp/llm" "$project_root/intent/llm"
  
  # Migrate ALL remaining content to ensure nothing is left behind
  migrate_remaining_content "$project_root"
  
  # Create config from existing YAML
  if [ -f "$project_root/stp/.config/config" ]; then
    convert_yaml_config_to_json "$project_root/stp/.config/config" "$project_root/.intent/config.json"
  else
    create_default_v2_config "$project_root"
  fi
}

# Migrate v1.2.1 to v2.0.0
migrate_v1_2_1_to_v2() {
  local project_root=$1
  
  echo "Migrating v1.2.1 structure..."
  
  # This project actually uses v1.2.0 structure with status directories
  # Migrate ALL steel threads from all locations
  if [ -d "$project_root/stp/prj/st" ]; then
    # First, migrate ST directories at the root level
    for dir in "$project_root/stp/prj/st"/ST*/; do
      if [ -d "$dir" ]; then
        local basename=$(basename "$dir")
        echo "  Migrating $basename..."
        mkdir -p "$project_root/intent/st/$basename"
        cp -r "$dir"/* "$project_root/intent/st/$basename/"
        
        # Update metadata in info.md
        if [ -f "$project_root/intent/st/$basename/info.md" ]; then
          convert_yaml_frontmatter "$project_root/intent/st/$basename/info.md" || true
          [ -f "$project_root/intent/st/$basename/info.md.tmp" ] && mv "$project_root/intent/st/$basename/info.md.tmp" "$project_root/intent/st/$basename/info.md"
        fi
      fi
    done
    
    # Then migrate from status directories (COMPLETED, NOT-STARTED, etc)
    for status_dir in "$project_root/stp/prj/st"/*/; do
      if [ -d "$status_dir" ] && [[ ! "$(basename "$status_dir")" =~ ^ST[0-9]+ ]]; then
        local status_name=$(basename "$status_dir")
        for st_dir in "$status_dir"/ST*/; do
          if [ -d "$st_dir" ]; then
            local basename=$(basename "$st_dir")
            echo "  Migrating $basename from $status_name..."
            mkdir -p "$project_root/intent/st/$status_name/$basename"
            cp -r "$st_dir"/* "$project_root/intent/st/$status_name/$basename/"
            
            # Update metadata in info.md
            if [ -f "$project_root/intent/st/$status_name/$basename/info.md" ]; then
              convert_yaml_frontmatter "$project_root/intent/st/$status_name/$basename/info.md" || true
              [ -f "$project_root/intent/st/$status_name/$basename/info.md.tmp" ] && mv "$project_root/intent/st/$status_name/$basename/info.md.tmp" "$project_root/intent/st/$status_name/$basename/info.md"
            fi
          fi
        done
      fi
    done
    
    # Copy steel_threads.md
    [ -f "$project_root/stp/prj/st/steel_threads.md" ] && cp "$project_root/stp/prj/st/steel_threads.md" "$project_root/intent/st/"
  fi
  
  # Migrate other known content
  [ -f "$project_root/stp/prj/wip.md" ] && cp "$project_root/stp/prj/wip.md" "$project_root/intent/"
  [ -d "$project_root/stp/eng/tpd" ] && cp -r "$project_root/stp/eng/tpd"/* "$project_root/intent/eng/tpd/" 2>/dev/null || true
  [ -d "$project_root/stp/llm" ] && cp -r "$project_root/stp/llm"/* "$project_root/intent/llm/" 2>/dev/null || true
  
  # Migrate ALL remaining content to ensure nothing is left behind
  migrate_remaining_content "$project_root"
  
  # Create config
  if [ -f "$project_root/stp/.config/config" ]; then
    convert_yaml_config_to_json "$project_root/stp/.config/config" "$project_root/.intent/config.json"
  else
    create_default_v2_config "$project_root"
  fi
}

# Migrate v2.0.0 to v2.1.0 (agent initialization)
migrate_v2_0_to_v2_1() {
  local project_root=$1
  
  echo "Upgrading v2.0.0 to v2.1.0 (agent initialization)..."
  
  # Update .intent/config.json to v2.1.0
  if [ -f "$project_root/.intent/config.json" ]; then
    echo "  Updating project version to 2.1.0..."
    local temp_file=$(mktemp)
    jq '.intent_version = "2.1.0" | .version = "2.1.0"' "$project_root/.intent/config.json" > "$temp_file"
    mv "$temp_file" "$project_root/.intent/config.json"
  fi
  
  # Initialize user agent manifest if needed
  local user_manifest_dir="$HOME/.intent/agents"
  if [ ! -d "$user_manifest_dir" ]; then
    echo "  Initializing user agent configuration..."
    mkdir -p "$user_manifest_dir"
    cat > "$user_manifest_dir/installed-agents.json" << 'EOF'
{
  "version": "1.0.0",
  "installed": []
}
EOF
  fi
  
  echo "  Agent system initialized successfully"
}

# Migrate v2.1.0 to v2.2.0 (fileindex command)
migrate_v2_1_to_v2_2() {
  local project_root=$1
  
  echo "Upgrading v2.1.0 to v2.2.0 (fileindex command)..."
  
  # Update .intent/config.json to v2.2.0
  if [ -f "$project_root/.intent/config.json" ]; then
    echo "  Updating project version to 2.2.0..."
    local temp_file=$(mktemp)
    jq '.intent_version = "2.2.0" | .version = "2.2.0"' "$project_root/.intent/config.json" > "$temp_file"
    mv "$temp_file" "$project_root/.intent/config.json"
  fi
  
  echo "  Fileindex command now available"
}

# Check if needs 2.2.1 upgrade
needs_v2_2_1_upgrade() {
  local version=$1
  
  case "$version" in
    "2.2.0")
      return 0  # Needs 2.2.1 upgrade
      ;;
    *)
      return 1  # Already upgraded or different version
      ;;
  esac
}

# Migrate v2.2.0 to v2.2.1
migrate_v2_2_to_v2_2_1() {
  local project_root=$1
  
  local target_version="$(get_intent_version 2>/dev/null || echo "2.2.1")"
  echo "Upgrading v2.2.0 to v$target_version..."
  
  # Update .intent/config.json to target version
  if [ -f "$project_root/.intent/config.json" ]; then
    echo "  Updating project version to $target_version..."
    local temp_file=$(mktemp)
    jq --arg v "$target_version" '.intent_version = $v | .version = $v' "$project_root/.intent/config.json" > "$temp_file"
    mv "$temp_file" "$project_root/.intent/config.json"
  fi
  
  echo "  Version updated to $target_version"
}

# Migrate all remaining content from stp/ to intent/
migrate_remaining_content() {
  local project_root=$1
  
  echo "  Migrating any additional content..."
  
  # Migrate remaining content from stp/* (top level)
  if [ -d "$project_root/stp" ]; then
    for item in "$project_root/stp/"*; do
      if [ -e "$item" ]; then
        local basename=$(basename "$item")
        # Skip already handled directories and config
        if [[ "$basename" != "prj" && "$basename" != ".config" && "$basename" != "eng" && "$basename" != "llm" && "$basename" != "usr" ]]; then
          echo "    Migrating additional: stp/$basename"
          cp -r "$item" "$project_root/intent/" 2>/dev/null || true
        fi
      fi
    done
  fi
  
  # Migrate remaining content from stp/prj/* (except st/ and wip.md)
  if [ -d "$project_root/stp/prj" ]; then
    for item in "$project_root/stp/prj/"*; do
      if [ -e "$item" ]; then
        local basename=$(basename "$item")
        if [[ "$basename" != "st" && "$basename" != "wip.md" ]]; then
          echo "    Migrating additional: stp/prj/$basename"
          cp -r "$item" "$project_root/intent/" 2>/dev/null || true
        fi
      fi
    done
  fi
  
  # Migrate remaining content from stp/eng/* (except tpd/)
  if [ -d "$project_root/stp/eng" ]; then
    for item in "$project_root/stp/eng/"*; do
      if [ -e "$item" ]; then
        local basename=$(basename "$item")
        if [[ "$basename" != "tpd" ]]; then
          echo "    Migrating additional: stp/eng/$basename"
          mkdir -p "$project_root/intent/eng"
          cp -r "$item" "$project_root/intent/eng/" 2>/dev/null || true
        fi
      fi
    done
  fi
  
  # Migrate remaining content from stp/usr/*
  if [ -d "$project_root/stp/usr" ]; then
    echo "    Migrating stp/usr/ content"
    mkdir -p "$project_root/intent/usr"
    cp -r "$project_root/stp/usr/"* "$project_root/intent/usr/" 2>/dev/null || true
  fi
  
  # Update file references in all migrated files
  echo "  Updating file references..."
  find "$project_root/intent" -type f -name "*.md" -o -name "*.txt" | while read -r file; do
    # Update stp/ references to intent/
    sed -i.bak 's|stp/prj/st/|intent/st/|g' "$file" 2>/dev/null || true
    sed -i.bak 's|stp/prj/|intent/|g' "$file" 2>/dev/null || true
    sed -i.bak 's|stp/eng/|intent/eng/|g' "$file" 2>/dev/null || true
    sed -i.bak 's|stp/usr/|intent/usr/|g' "$file" 2>/dev/null || true
    sed -i.bak 's|stp/llm/|intent/llm/|g' "$file" 2>/dev/null || true
    # Clean up backup files
    rm -f "${file}.bak" 2>/dev/null || true
  done
}

# Create default v2 config
create_default_v2_config() {
  local project_root=$1
  local project_name=$(basename "$project_root")
  local author="${USER:-Unknown}"
  local target_version="$(get_intent_version 2>/dev/null || echo "2.2.1")"
  
  cat > "$project_root/.intent/config.json" << EOF
{
  "version": "$target_version",
  "project_name": "$project_name",
  "author": "$author",
  "created": "$(date +%Y-%m-%d)",
  "st_prefix": "ST"
}
EOF
}

# Create CLAUDE.md for Intent v2.0.0+
create_claude_md() {
  local project_root=$1
  local project_name=$(jq -r '.project_name // "Project"' "$project_root/.intent/config.json" 2>/dev/null || echo "Project")
  local author=$(jq -r '.author // "Unknown"' "$project_root/.intent/config.json" 2>/dev/null || echo "${USER:-Unknown}")
  local version=$(jq -r '.intent_version // "2.0.0"' "$project_root/.intent/config.json" 2>/dev/null || echo "2.0.0")
  
  cat > "$project_root/CLAUDE.md" << EOF
# $project_name Project Guidelines

This is an Intent v$version project (formerly STP).

## Project Structure

- \`intent/\` - Project artifacts (steel threads, docs, work tracking)
  - \`st/\` - Steel threads organized as directories
  - \`docs/\` - Technical documentation
  - \`llm/\` - LLM-specific guidelines
- \`backlog/\` - Task management (if using Backlog.md)
- \`.intent/\` - Configuration and metadata

## Steel Threads

Steel threads are organized as directories under \`intent/st/\`:
- Each steel thread has its own directory (e.g., ST0001/)
- Minimum required file is \`info.md\` with metadata
- Optional files: design.md, impl.md, tasks.md

## Commands

- \`intent st new "Title"\` - Create a new steel thread
- \`intent st list\` - List all steel threads
- \`intent st show <id>\` - Show steel thread details
- \`intent agents init\` - Initialize agent configuration
- \`intent agents list\` - List available agents
- \`intent agents install <agent>\` - Install an agent
- \`intent doctor\` - Check configuration
- \`intent help\` - Get help

## Migration Notes

This project was migrated from STP to Intent v$version on $(date +%Y-%m-%d).
- Old structure: \`stp/prj/st/\`, \`stp/eng/\`, etc.
- New structure: \`intent/st/\`, \`intent/docs/\`, etc.
- Configuration moved from YAML to JSON format

## Author

$author
EOF
}