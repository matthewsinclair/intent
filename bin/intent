#!/bin/bash
# intent - Main command for Intent v2.0.0
# Copyright (c) 2024 Matthew Sinclair
# Licensed under the MIT License (see LICENSE file)
# Usage: intent <command> [options] [arguments]

# Version
INTENT_VERSION="2.0.0"

# Exit on error
set -e

# Function to display error messages
error() {
  echo "Error: $1" >&2
  exit 1
}

# Determine INTENT_HOME if not set
if [ -z "$INTENT_HOME" ]; then
  # First try to determine from the script location
  SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
  if [ -d "$SCRIPT_DIR/../lib" ]; then
    # We're likely in the bin directory of an Intent installation
    export INTENT_HOME="$(cd "$SCRIPT_DIR/.." && pwd)"
  elif [ -d "$SCRIPT_DIR/../../intent/lib" ]; then
    # We're in the bin directory under intent
    export INTENT_HOME="$(cd "$SCRIPT_DIR/../.." && pwd)"
  else
    # Try to find Intent in common locations
    for dir in ~/intent ~/.intent /usr/local/intent; do
      if [ -d "$dir" ]; then
        export INTENT_HOME="$dir"
        break
      fi
    done
  fi
  
  # If still not found, error out
  if [ -z "$INTENT_HOME" ]; then
    error "Could not determine INTENT_HOME. Please set it manually."
  fi
fi

# Check if bin directory exists
if [ ! -d "$INTENT_HOME/bin" ]; then
  error "Invalid INTENT_HOME: bin directory not found at $INTENT_HOME/bin"
fi

# Set bin directory
BIN_DIR="$INTENT_HOME/bin"

# Define global commands that don't require project context
GLOBAL_COMMANDS="help doctor bootstrap init version info agents"

# Function to check if command is global
is_global_command() {
  local cmd="$1"
  for gc in $GLOBAL_COMMANDS; do
    [ "$cmd" = "$gc" ] && return 0
  done
  return 1
}

# Display info if no arguments provided
if [ $# -eq 0 ]; then
  # Info is a global command, execute directly
  exec "$BIN_DIR/intent_info"
fi

# Get the command
COMMAND="$1"
shift

# Handle version flag
if [ "$COMMAND" = "--version" ] || [ "$COMMAND" = "-v" ] || [ "$COMMAND" = "version" ]; then
  echo "Intent version $INTENT_VERSION"
  exit 0
fi

# Handle help command specially
if [ "$COMMAND" = "help" ] || [ "$COMMAND" = "--help" ] || [ "$COMMAND" = "-h" ]; then
  exec "$BIN_DIR/intent_help" "$@"
fi

# Map shortened commands to full names
case "$COMMAND" in
  st)
    COMMAND="st"
    COMMAND_SCRIPT="intent_st"
    ;;
  bl)
    COMMAND="bl"
    COMMAND_SCRIPT="intent_bl"
    ;;
  agents)
    COMMAND="agents"
    COMMAND_SCRIPT="intent_agents"
    ;;
  *)
    # Default: prefix with intent_
    COMMAND_SCRIPT="intent_$COMMAND"
    ;;
esac

# Check if command script exists
if [ ! -f "$BIN_DIR/$COMMAND_SCRIPT" ]; then
  error "Unknown command '$COMMAND'. Run 'intent help' for usage information."
fi

# Check if script is executable
if [ ! -x "$BIN_DIR/$COMMAND_SCRIPT" ]; then
  echo "Warning: Making script executable: $COMMAND_SCRIPT" >&2
  chmod +x "$BIN_DIR/$COMMAND_SCRIPT"
fi

# Check if this is a global command
if is_global_command "$COMMAND"; then
  # Execute without requiring project context
  exec "$BIN_DIR/$COMMAND_SCRIPT" "$@"
fi

# For project commands, source config and check for project root
if [ -f "$BIN_DIR/intent_config" ]; then
  source "$BIN_DIR/intent_config"
  # Load configuration
  load_intent_config
  
  # Check if we found a project root (check for empty or unset)
  if [ -z "${PROJECT_ROOT:-}" ] || [ "$PROJECT_ROOT" = "" ]; then
    echo "Error: Not in an Intent project directory." >&2
    echo "" >&2
    echo "The '$COMMAND' command requires an Intent project." >&2
    echo "" >&2
    echo "To create a new project:  intent init" >&2
    echo "To see all commands:      intent help" >&2
    exit 1
  fi
else
  error "Missing intent_config library. Intent installation may be corrupted."
fi

# Execute command with remaining arguments
exec "$BIN_DIR/$COMMAND_SCRIPT" "$@"