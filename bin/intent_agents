#!/bin/bash
# intent_agents - Manage Claude Code sub-agents for Intent projects
# Copyright (c) 2024 Matthew Sinclair
# Licensed under the MIT License (see LICENSE file)
# Commands: list, install, sync, uninstall, show, status

# Source helpers
INTENT_BIN="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$INTENT_BIN/intent_helpers"

# Show help
intent_agents_help() {
  cat << EOF
Usage: intent agents <command> [options]

Manage Claude Code sub-agents for Intent projects.

Commands:
  init        Initialize agent configuration
  list        List available and installed agents
  install     Install agent(s) to Claude configuration
  sync        Sync installed agents with latest versions
  uninstall   Remove Intent-managed agents
  show        Display detailed agent information
  status      Check agent health and integrity

Examples:
  intent agents init              # Initialize agent configuration
  intent agents list              # Show all agents
  intent agents install intent    # Install the Intent agent
  intent agents install --all     # Install all available agents
  intent agents sync             # Update modified agents

For help on a specific command:
  intent help agents <command>
EOF
}

# Initialize agent configuration
intent_agents_init() {
  echo "Initializing agent configuration..."
  
  # Check for project or global init
  local init_type="global"
  local force=false
  
  for arg in "$@"; do
    if [ "$arg" = "--project" ] || [ "$arg" = "-p" ]; then
      init_type="project"
    elif [ "$arg" = "--force" ] || [ "$arg" = "-f" ]; then
      force=true
    fi
  done
  
  # Initialize based on type
  if [ "$init_type" = "project" ]; then
    # Project-level initialization
    if [ -z "${PROJECT_ROOT:-}" ]; then
      echo "Error: Not in an Intent project directory"
      echo "Use 'intent agents init' without --project for global initialization"
      return 1
    fi
    
    echo "Initializing project agent configuration..."
    
    # Create project agent directories
    mkdir -p "$PROJECT_ROOT/agents/.manifest"
    
    # Create project agent manifest if it doesn't exist
    if [ ! -f "$PROJECT_ROOT/agents/.manifest/global-agents.json" ]; then
      echo "  Creating project agent manifest..."
      cat > "$PROJECT_ROOT/agents/.manifest/global-agents.json" << 'EOF'
{
  "version": "1.0.0",
  "agents": []
}
EOF
    elif [ "$force" = true ]; then
      echo "  Project agent manifest already exists (use --force to overwrite)"
    fi
    
    # Initialize project agent tracking
    mkdir -p "$PROJECT_ROOT/intent/agents/.manifest"
    if [ ! -f "$PROJECT_ROOT/intent/agents/.manifest/installed-agents.json" ]; then
      cat > "$PROJECT_ROOT/intent/agents/.manifest/installed-agents.json" << 'EOF'
{
  "version": "1.0.0",
  "installed": []
}
EOF
    fi
    
    echo "Project agent configuration initialized successfully"
  else
    # Global initialization
    echo "Initializing global agent configuration..."
    
    # Create user agent directory
    local user_agent_dir="$HOME/.intent/agents"
    mkdir -p "$user_agent_dir"
    
    # Create user installed agents manifest
    if [ ! -f "$user_agent_dir/installed-agents.json" ] || [ "$force" = true ]; then
      echo "  Creating user agent manifest..."
      cat > "$user_agent_dir/installed-agents.json" << 'EOF'
{
  "version": "1.0.0",
  "installed": []
}
EOF
    else
      echo "  User agent manifest already exists (use --force to recreate)"
    fi
    
    # Check global Intent installation
    if [ -n "$INTENT_HOME" ] && [ -d "$INTENT_HOME/agents" ]; then
      # Ensure global agent manifest exists
      if [ ! -f "$INTENT_HOME/agents/.manifest/global-agents.json" ]; then
        echo "  Warning: Global agent manifest missing at $INTENT_HOME/agents/.manifest/"
        echo "  This may indicate an incomplete Intent installation"
      else
        local agent_count=$(jq -r '.agents | length' "$INTENT_HOME/agents/.manifest/global-agents.json" 2>/dev/null || echo 0)
        echo "  Found $agent_count available agents in Intent installation"
      fi
    else
      echo "  Warning: INTENT_HOME not set or agents directory not found"
      echo "  Some agent features may not work correctly"
    fi
    
    # Check for Claude Code
    if [ -d "$HOME/.claude" ]; then
      echo "  Claude Code detected at $HOME/.claude"
      mkdir -p "$HOME/.claude/agents"
    else
      echo "  Note: Claude Code not detected"
      echo "  Install Claude Code to use agents: https://claude.ai/download"
    fi
    
    echo ""
    echo "Global agent configuration initialized successfully"
    echo ""
    echo "Next steps:"
    echo "  intent agents list        # See available agents"
    echo "  intent agents install <agent>  # Install an agent"
  fi
}

# Helper: Check if agent is installed
is_agent_installed() {
  local agent_name="$1"
  [ -f "$HOME/.claude/agents/${agent_name}.md" ]
}

# Helper: Read agent info from manifest
get_agent_info() {
  local manifest="$1"
  local agent_name="$2"
  
  if [ -f "$manifest" ]; then
    jq -r ".agents[] | select(.name == \"$agent_name\")" "$manifest" 2>/dev/null
  fi
}

# List available and installed agents
intent_agents_list() {
  echo "Available Agents:"
  echo ""
  
  # Global agents
  local global_manifest="$INTENT_HOME/agents/.manifest/global-agents.json"
  if [ -f "$global_manifest" ]; then
    echo "Global:"
    
    # Read agent names from manifest
    local agents=$(jq -r '.agents[].name' "$global_manifest" 2>/dev/null)
    
    for agent in $agents; do
      local info=$(jq -r ".agents[] | select(.name == \"$agent\") | .description" "$global_manifest" 2>/dev/null)
      local status=""
      
      if is_agent_installed "$agent"; then
        status=" [INSTALLED]"
      else
        status=" [NOT INSTALLED]"
      fi
      
      printf "  %-12s - %s%s\n" "$agent" "$info" "$status"
    done
  else
    echo "  No global agents found"
  fi
  
  echo ""
  
  # Local agents (if in project)
  if [ -n "${PROJECT_ROOT:-}" ] && [ -d "$PROJECT_ROOT/intent/agents" ]; then
    local local_manifest="$PROJECT_ROOT/intent/agents/.manifest/installed-agents.json"
    if [ -f "$local_manifest" ]; then
      echo "Local (Project-specific):"
      # TODO: Implement local agent listing
      echo "  Local agent support coming soon"
    fi
  fi
  
  # Check for Claude installation
  if [ ! -d "$HOME/.claude" ]; then
    echo ""
    echo "Note: Claude Code not detected. Install Claude Code to use agents."
  fi
}

# Helper: Calculate checksum for a file
calculate_checksum() {
  local file="$1"
  if command -v sha256sum >/dev/null 2>&1; then
    sha256sum "$file" | cut -d' ' -f1
  elif command -v shasum >/dev/null 2>&1; then
    shasum -a 256 "$file" | cut -d' ' -f1
  else
    echo "unknown"
  fi
}

# Helper: Create or update installed agents manifest
update_installed_manifest() {
  local agent_name="$1"
  local source_type="$2"  # global or local
  local source_path="$3"
  
  # Determine manifest location
  local manifest_dir
  local manifest_file
  
  if [ -n "${PROJECT_ROOT:-}" ]; then
    # In a project - use project manifest
    manifest_dir="$PROJECT_ROOT/intent/agents/.manifest"
    manifest_file="$manifest_dir/installed-agents.json"
  else
    # Not in project - use global user manifest
    manifest_dir="$HOME/.intent/agents"
    manifest_file="$manifest_dir/installed-agents.json"
  fi
  
  # Create directory if needed
  mkdir -p "$manifest_dir"
  
  # Initialize manifest if it doesn't exist
  if [ ! -f "$manifest_file" ]; then
    cat > "$manifest_file" << EOF
{
  "version": "1.0.0",
  "installed": []
}
EOF
  fi
  
  # Calculate checksum
  local checksum=$(calculate_checksum "$HOME/.claude/agents/${agent_name}.md")
  local timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
  
  # Remove existing entry if present
  local temp_file=$(mktemp)
  jq "del(.installed[] | select(.name == \"$agent_name\"))" "$manifest_file" > "$temp_file"
  
  # Add new entry
  jq ".installed += [{
    \"name\": \"$agent_name\",
    \"source\": \"$source_type\",
    \"source_path\": \"$source_path\",
    \"installed_at\": \"$timestamp\",
    \"checksum\": \"$checksum\",
    \"modified\": false
  }]" "$temp_file" > "$manifest_file"
  
  rm -f "$temp_file"
}

# Install agents
intent_agents_install() {
  # Check for Claude
  if [ ! -d "$HOME/.claude" ]; then
    echo "Error: Claude Code not detected. Please install Claude Code first."
    echo "Visit: https://claude.ai/download"
    return 1
  fi
  
  # Create agents directory if needed
  mkdir -p "$HOME/.claude/agents"
  
  # Parse arguments
  if [ "$#" -eq 0 ]; then
    echo "Error: No agent specified"
    echo "Usage: intent agents install <agent-name> [agent-name...]"
    echo "       intent agents install --all"
    return 1
  fi
  
  local agents_to_install=()
  local install_all=false
  local force=false
  
  # Check for flags
  for arg in "$@"; do
    if [ "$arg" = "--all" ]; then
      install_all=true
    elif [ "$arg" = "--force" ] || [ "$arg" = "-f" ]; then
      force=true
    else
      agents_to_install+=("$arg")
    fi
  done
  
  # Get list of available agents if --all
  if [ "$install_all" = true ]; then
    local global_manifest="$INTENT_HOME/agents/.manifest/global-agents.json"
    if [ -f "$global_manifest" ]; then
      agents_to_install=($(jq -r '.agents[].name' "$global_manifest" 2>/dev/null))
    fi
  fi
  
  # Install each agent
  local installed_count=0
  local skipped_count=0
  local failed_count=0
  
  for agent in "${agents_to_install[@]}"; do
    echo "Installing agent: $agent"
    
    # Check if agent exists in global manifest
    local agent_path="$INTENT_HOME/agents/$agent/agent.md"
    if [ ! -f "$agent_path" ]; then
      echo "  Error: Agent '$agent' not found"
      ((failed_count++))
      continue
    fi
    
    # Check if already installed
    local target="$HOME/.claude/agents/${agent}.md"
    if [ -f "$target" ]; then
      if [ "$force" = false ]; then
        echo -n "  Agent already exists. Overwrite? [y/N] "
        read -r response
        if [[ ! "$response" =~ ^[Yy]$ ]]; then
          echo "  Skipped"
          ((skipped_count++))
          continue
        fi
      else
        echo "  Agent already exists. Overwriting (--force)"
      fi
    fi
    
    # Copy agent
    if cp "$agent_path" "$target"; then
      echo "  Installed successfully"
      update_installed_manifest "$agent" "global" "$INTENT_HOME/agents/$agent"
      ((installed_count++))
    else
      echo "  Error: Failed to install"
      ((failed_count++))
    fi
  done
  
  # Summary
  echo ""
  echo "Installation complete:"
  echo "  Installed: $installed_count"
  [ "$skipped_count" -gt 0 ] && echo "  Skipped: $skipped_count"
  [ "$failed_count" -gt 0 ] && echo "  Failed: $failed_count"
  
  # Return success if at least one agent was installed or skipped
  if [ "$installed_count" -gt 0 ] || [ "$skipped_count" -gt 0 ]; then
    return 0
  elif [ "$failed_count" -gt 0 ]; then
    return 1
  else
    return 0
  fi
}

# Sync installed agents with latest versions
intent_agents_sync() {
  # Check for Claude
  if [ ! -d "$HOME/.claude" ]; then
    echo "Error: Claude Code not detected."
    return 1
  fi
  
  # Determine manifest location
  local manifest_file
  if [ -n "${PROJECT_ROOT:-}" ]; then
    manifest_file="$PROJECT_ROOT/intent/agents/.manifest/installed-agents.json"
  else
    manifest_file="$HOME/.intent/agents/installed-agents.json"
  fi
  
  # Check if manifest exists
  if [ ! -f "$manifest_file" ]; then
    echo "No installed agents found."
    echo "Use 'intent agents install' to install agents first."
    return 0
  fi
  
  # Parse force flag
  local force=false
  for arg in "$@"; do
    if [ "$arg" = "--force" ] || [ "$arg" = "-f" ]; then
      force=true
      break
    fi
  done
  
  echo "Syncing installed agents..."
  echo ""
  
  # Read installed agents
  local agents=$(jq -r '.installed[].name' "$manifest_file" 2>/dev/null)
  local updated_count=0
  local skipped_count=0
  local failed_count=0
  
  for agent in $agents; do
    echo "Checking agent: $agent"
    
    # Get agent info from manifest
    local agent_info=$(jq -r ".installed[] | select(.name == \"$agent\")" "$manifest_file")
    local source=$(echo "$agent_info" | jq -r '.source')
    local source_path=$(echo "$agent_info" | jq -r '.source_path')
    local old_checksum=$(echo "$agent_info" | jq -r '.checksum')
    
    # Determine source file
    local source_file
    if [ "$source" = "global" ]; then
      source_file="$source_path/agent.md"
    else
      # Local agents not yet implemented
      echo "  Error: Local agent sync not yet implemented"
      ((failed_count++))
      continue
    fi
    
    # Check if source exists
    if [ ! -f "$source_file" ]; then
      echo "  Error: Source file not found: $source_file"
      ((failed_count++))
      continue
    fi
    
    # Calculate current checksums
    local source_checksum=$(calculate_checksum "$source_file")
    local target_file="$HOME/.claude/agents/${agent}.md"
    local target_checksum=$(calculate_checksum "$target_file")
    
    # Check if update needed
    if [ "$source_checksum" = "$old_checksum" ] && [ "$target_checksum" = "$old_checksum" ]; then
      echo "  Up to date"
      ((skipped_count++))
      continue
    fi
    
    # Check if user modified the agent
    if [ "$target_checksum" != "$old_checksum" ] && [ "$source_checksum" = "$old_checksum" ]; then
      echo "  Warning: Agent has been modified locally"
      if [ "$force" = false ]; then
        echo -n "  Overwrite local changes? [y/N] "
        read -r response
        if [[ ! "$response" =~ ^[Yy]$ ]]; then
          echo "  Skipped"
          ((skipped_count++))
          continue
        fi
      else
        echo "  Overwriting local changes (--force)"
      fi
    elif [ "$source_checksum" != "$old_checksum" ]; then
      echo "  Update available"
    fi
    
    # Copy updated agent
    if cp "$source_file" "$target_file"; then
      echo "  Updated successfully"
      update_installed_manifest "$agent" "$source" "$source_path"
      ((updated_count++))
    else
      echo "  Error: Failed to update"
      ((failed_count++))
    fi
  done
  
  # Summary
  echo ""
  echo "Sync complete:"
  echo "  Updated: $updated_count"
  [ "$skipped_count" -gt 0 ] && echo "  Skipped: $skipped_count"
  [ "$failed_count" -gt 0 ] && echo "  Failed: $failed_count"
  
  # Return status
  if [ "$updated_count" -gt 0 ] || [ "$skipped_count" -gt 0 ]; then
    return 0
  elif [ "$failed_count" -gt 0 ]; then
    return 1
  else
    return 0
  fi
}

# Helper: Remove agent from manifest
remove_from_manifest() {
  local agent_name="$1"
  
  # Determine manifest location
  local manifest_file
  if [ -n "${PROJECT_ROOT:-}" ]; then
    manifest_file="$PROJECT_ROOT/intent/agents/.manifest/installed-agents.json"
  else
    manifest_file="$HOME/.intent/agents/installed-agents.json"
  fi
  
  if [ ! -f "$manifest_file" ]; then
    return 0
  fi
  
  # Remove entry
  local temp_file=$(mktemp)
  jq "del(.installed[] | select(.name == \"$agent_name\"))" "$manifest_file" > "$temp_file"
  mv "$temp_file" "$manifest_file"
}

# Uninstall agents
intent_agents_uninstall() {
  # Check for Claude
  if [ ! -d "$HOME/.claude" ]; then
    echo "Error: Claude Code not detected."
    return 1
  fi
  
  # Parse arguments
  if [ "$#" -eq 0 ]; then
    echo "Error: No agent specified"
    echo "Usage: intent agents uninstall <agent-name> [agent-name...]"
    echo "       intent agents uninstall --all"
    return 1
  fi
  
  local agents_to_remove=()
  local remove_all=false
  local force=false
  
  # Check for flags
  for arg in "$@"; do
    if [ "$arg" = "--all" ]; then
      remove_all=true
    elif [ "$arg" = "--force" ] || [ "$arg" = "-f" ]; then
      force=true
    else
      agents_to_remove+=("$arg")
    fi
  done
  
  # Get list of installed agents if --all
  if [ "$remove_all" = true ]; then
    # Determine manifest location
    local manifest_file
    if [ -n "${PROJECT_ROOT:-}" ]; then
      manifest_file="$PROJECT_ROOT/intent/agents/.manifest/installed-agents.json"
    else
      manifest_file="$HOME/.intent/agents/installed-agents.json"
    fi
    
    if [ ! -f "$manifest_file" ]; then
      echo "No installed agents found."
      return 0
    fi
    
    agents_to_remove=($(jq -r '.installed[].name' "$manifest_file" 2>/dev/null))
    
    if [ ${#agents_to_remove[@]} -eq 0 ]; then
      echo "No Intent-managed agents found."
      return 0
    fi
  fi
  
  # Confirm if not forced
  if [ "$force" = false ]; then
    echo "The following agents will be uninstalled:"
    for agent in "${agents_to_remove[@]}"; do
      echo "  - $agent"
    done
    echo -n "Continue? [y/N] "
    read -r response
    if [[ ! "$response" =~ ^[Yy]$ ]]; then
      echo "Cancelled"
      return 0
    fi
  fi
  
  # Uninstall each agent
  local removed_count=0
  local skipped_count=0
  local failed_count=0
  
  for agent in "${agents_to_remove[@]}"; do
    echo "Uninstalling agent: $agent"
    
    local agent_file="$HOME/.claude/agents/${agent}.md"
    
    # Check if agent exists
    if [ ! -f "$agent_file" ]; then
      echo "  Agent not found"
      ((skipped_count++))
      continue
    fi
    
    # Check if agent is managed by Intent
    local manifest_file
    if [ -n "${PROJECT_ROOT:-}" ]; then
      manifest_file="$PROJECT_ROOT/intent/agents/.manifest/installed-agents.json"
    else
      manifest_file="$HOME/.intent/agents/installed-agents.json"
    fi
    
    if [ -f "$manifest_file" ]; then
      local is_managed=$(jq -r ".installed[] | select(.name == \"$agent\") | .name" "$manifest_file" 2>/dev/null)
      if [ -z "$is_managed" ]; then
        echo "  Warning: Agent not managed by Intent"
        if [ "$force" = false ]; then
          echo -n "  Remove anyway? [y/N] "
          read -r response
          if [[ ! "$response" =~ ^[Yy]$ ]]; then
            echo "  Skipped"
            ((skipped_count++))
            continue
          fi
        fi
      fi
    fi
    
    # Remove agent file
    if rm -f "$agent_file"; then
      echo "  Removed successfully"
      remove_from_manifest "$agent"
      ((removed_count++))
    else
      echo "  Error: Failed to remove"
      ((failed_count++))
    fi
  done
  
  # Summary
  echo ""
  echo "Uninstall complete:"
  echo "  Removed: $removed_count"
  [ "$skipped_count" -gt 0 ] && echo "  Skipped: $skipped_count"
  [ "$failed_count" -gt 0 ] && echo "  Failed: $failed_count"
  
  # Return status
  if [ "$removed_count" -gt 0 ] || [ "$skipped_count" -gt 0 ]; then
    return 0
  elif [ "$failed_count" -gt 0 ]; then
    return 1
  else
    return 0
  fi
}

# Check status of installed agents
intent_agents_status() {
  # Parse flags
  local VERBOSE=false
  for arg in "$@"; do
    if [ "$arg" = "--verbose" ] || [ "$arg" = "-v" ]; then
      VERBOSE=true
    fi
  done
  
  # Color codes (if terminal)
  if [ -t 1 ]; then
    RED='\033[0;31m'
    YELLOW='\033[0;33m'
    GREEN='\033[0;32m'
    NC='\033[0m' # No Color
  else
    RED=''
    YELLOW=''
    GREEN=''
    NC=''
  fi
  
  # Check for Claude
  if [ ! -d "$HOME/.claude" ]; then
    echo "Error: Claude Code not detected."
    echo "Install Claude Code to use agents: https://claude.ai/download"
    return 1
  fi
  
  # Determine manifest location
  local manifest_file
  if [ -n "${PROJECT_ROOT:-}" ]; then
    manifest_file="$PROJECT_ROOT/intent/agents/.manifest/installed-agents.json"
  else
    manifest_file="$HOME/.intent/agents/installed-agents.json"
  fi
  
  # Check if any agents are installed
  if [ ! -f "$manifest_file" ]; then
    echo "No installed agents found."
    echo "Use 'intent agents install' to install agents."
    return 0
  fi
  
  echo "Checking agent status..."
  echo ""
  
  # Read installed agents
  local agents=$(jq -r '.installed[].name' "$manifest_file" 2>/dev/null)
  if [ -z "$agents" ]; then
    echo "No agents found in manifest."
    return 0
  fi
  
  # Counters
  local total=0
  local ok_count=0
  local modified_count=0
  local missing_count=0
  local error_count=0
  
  # Check each agent
  for agent in $agents; do
    ((total++))
    
    # Get agent info from manifest
    local agent_info=$(jq -r ".installed[] | select(.name == \"$agent\")" "$manifest_file")
    local source=$(echo "$agent_info" | jq -r '.source')
    local source_path=$(echo "$agent_info" | jq -r '.source_path')
    local manifest_checksum=$(echo "$agent_info" | jq -r '.checksum')
    local installed_at=$(echo "$agent_info" | jq -r '.installed_at // "Unknown"')
    
    # Check installed file
    local installed_file="$HOME/.claude/agents/${agent}.md"
    local status="OK"
    local status_color="${GREEN}"
    local details=""
    
    if [ ! -f "$installed_file" ]; then
      status="MISSING"
      status_color="${RED}"
      details="Agent file not found"
      ((missing_count++))
    else
      # Calculate current checksum
      local current_checksum=$(calculate_checksum "$installed_file")
      
      # Check source file
      local source_file
      if [ "$source" = "global" ]; then
        source_file="$source_path/agent.md"
      else
        # Local agents not yet fully implemented
        source_file="$source_path/agent.md"
      fi
      
      if [ ! -f "$source_file" ]; then
        status="ERROR"
        status_color="${RED}"
        details="Source file missing: $source_file"
        ((error_count++))
      elif [ "$current_checksum" != "$manifest_checksum" ]; then
        # Check if it matches source (user might have synced manually)
        local source_checksum=$(calculate_checksum "$source_file")
        if [ "$current_checksum" = "$source_checksum" ]; then
          status="UPDATED"
          status_color="${YELLOW}"
          details="Synced but manifest outdated"
          ((modified_count++))
        else
          status="MODIFIED"
          status_color="${YELLOW}"
          details="Local changes detected"
          ((modified_count++))
        fi
      else
        # Check if source has updates
        local source_checksum=$(calculate_checksum "$source_file")
        if [ "$source_checksum" != "$manifest_checksum" ]; then
          status="UPDATE"
          status_color="${YELLOW}"
          details="Update available"
          ((modified_count++))
        else
          ((ok_count++))
        fi
      fi
    fi
    
    # Display status
    printf "%-15s " "$agent"
    printf "${status_color}%-10s${NC}" "[$status]"
    if [ -n "$details" ]; then
      echo " - $details"
    else
      echo ""
    fi
    
    # Verbose details
    if [ "$VERBOSE" = true ]; then
      echo "  Source: $source"
      echo "  Installed: $installed_at"
      if [ "$status" != "MISSING" ] && [ "$status" != "ERROR" ]; then
        echo "  Location: $installed_file"
      fi
      echo ""
    fi
  done
  
  # Summary
  echo ""
  echo "Summary:"
  echo "  Total: $total"
  [ $ok_count -gt 0 ] && echo "  OK: $ok_count"
  [ $modified_count -gt 0 ] && echo "  Modified/Updates: $modified_count"
  [ $missing_count -gt 0 ] && echo "  Missing: $missing_count"
  [ $error_count -gt 0 ] && echo "  Errors: $error_count"
  
  # Recommendations
  if [ $missing_count -gt 0 ] || [ $error_count -gt 0 ]; then
    echo ""
    echo "Recommendations:"
    if [ $missing_count -gt 0 ]; then
      echo "  - Run 'intent agents install' to restore missing agents"
    fi
    if [ $error_count -gt 0 ]; then
      echo "  - Check error details above and reinstall affected agents"
    fi
  elif [ $modified_count -gt 0 ]; then
    echo ""
    echo "Run 'intent agents sync' to update agents with available changes."
  fi
  
  # Return non-zero if issues found
  if [ $missing_count -gt 0 ] || [ $error_count -gt 0 ]; then
    return 1
  else
    return 0
  fi
}

# Show detailed agent information
intent_agents_show() {
  if [ "$#" -eq 0 ]; then
    echo "Error: Agent name required"
    echo "Usage: intent agents show <agent-name>"
    return 1
  fi
  
  local agent_name="$1"
  
  # Check global agents first
  local global_manifest="$INTENT_HOME/agents/.manifest/global-agents.json"
  local agent_info=""
  local source_type=""
  local source_path=""
  
  if [ -f "$global_manifest" ]; then
    agent_info=$(jq -r ".agents[] | select(.name == \"$agent_name\")" "$global_manifest" 2>/dev/null)
    if [ -n "$agent_info" ]; then
      source_type="global"
      source_path="$INTENT_HOME/agents/$agent_name"
    fi
  fi
  
  # TODO: Check local agents when implemented
  
  if [ -z "$agent_info" ]; then
    echo "Error: Agent '$agent_name' not found"
    return 1
  fi
  
  # Parse agent info
  local version=$(echo "$agent_info" | jq -r '.version // "unknown"')
  local description=$(echo "$agent_info" | jq -r '.description // "No description"')
  
  # Check if installed
  local status="NOT INSTALLED"
  local installed_path=""
  if [ -f "$HOME/.claude/agents/${agent_name}.md" ]; then
    status="INSTALLED"
    installed_path="$HOME/.claude/agents/${agent_name}.md"
  fi
  
  # Read metadata if available
  local metadata_file="$source_path/metadata.json"
  local tools="Not specified"
  local tags="None"
  local author="Unknown"
  
  if [ -f "$metadata_file" ]; then
    local metadata=$(cat "$metadata_file")
    tools=$(echo "$metadata" | jq -r '.tools[]?' 2>/dev/null | tr '\n' ',' | sed 's/,$//' | sed 's/,/, /g' || echo "Not specified")
    tags=$(echo "$metadata" | jq -r '.tags[]?' 2>/dev/null | tr '\n' ',' | sed 's/,$//' | sed 's/,/, /g' || echo "None")
    author=$(echo "$metadata" | jq -r '.author // "Unknown"' 2>/dev/null)
  fi
  
  # Display agent information
  echo "Agent: $agent_name"
  echo "Version: $version"
  echo "Description: $description"
  echo "Status: $status"
  echo "Source: $source_type"
  echo "Author: $author"
  echo ""
  echo "Tools: $tools"
  echo "Tags: $tags"
  
  # Show installation info if installed
  if [ "$status" = "INSTALLED" ]; then
    # Check if modified
    local manifest_file
    if [ -n "${PROJECT_ROOT:-}" ]; then
      manifest_file="$PROJECT_ROOT/intent/agents/.manifest/installed-agents.json"
    else
      manifest_file="$HOME/.intent/agents/installed-agents.json"
    fi
    
    if [ -f "$manifest_file" ]; then
      local installed_info=$(jq -r ".installed[] | select(.name == \"$agent_name\")" "$manifest_file" 2>/dev/null)
      if [ -n "$installed_info" ]; then
        local installed_at=$(echo "$installed_info" | jq -r '.installed_at // "Unknown"')
        local modified=$(echo "$installed_info" | jq -r '.modified // false')
        echo ""
        echo "Installed: $installed_at"
        if [ "$modified" = "true" ]; then
          echo "Modified: Yes (local changes present)"
        fi
      fi
    fi
  fi
  
  # Show content preview
  local agent_file="$source_path/agent.md"
  if [ -f "$agent_file" ]; then
    echo ""
    echo "System Prompt Preview:"
    echo "---"
    # Skip YAML frontmatter and show first 10 lines of content
    awk 'BEGIN{fm=0} /^---$/{fm++; next} fm==2{lines++; print} lines>=10{exit}' "$agent_file"
    echo "---"
    echo ""
    if [ "$status" = "INSTALLED" ]; then
      echo "Full content: $installed_path"
    else
      echo "To install: intent agents install $agent_name"
    fi
  else
    echo ""
    echo "Error: Agent file not found at $agent_file"
  fi
}

# Route commands
case "$1" in
  init)
    shift
    intent_agents_init "$@"
    ;;
  list)
    shift
    intent_agents_list "$@"
    ;;
  install)
    shift
    intent_agents_install "$@"
    ;;
  sync)
    shift
    intent_agents_sync "$@"
    ;;
  uninstall)
    shift
    intent_agents_uninstall "$@"
    ;;
  show)
    shift
    intent_agents_show "$@"
    ;;
  status)
    shift
    intent_agents_status "$@"
    ;;
  ""|help|-h|--help)
    intent_agents_help
    ;;
  *)
    echo "Error: Unknown command 'intent agents $1'"
    echo "Run 'intent agents help' for usage"
    exit 1
    ;;
esac