#!/bin/bash
# intent_agents - Manage Claude Code sub-agents for Intent projects
# Copyright (c) 2024 Matthew Sinclair
# Licensed under the MIT License (see LICENSE file)
# Commands: list, install, sync, uninstall, show, status

# Source helpers
INTENT_BIN="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$INTENT_BIN/intent_helpers"

# Show help
intent_agents_help() {
  cat << EOF
Usage: intent agents <command> [options]

Manage Claude Code sub-agents for Intent projects.

Commands:
  list        List available and installed agents
  install     Install agent(s) to Claude configuration
  sync        Sync installed agents with latest versions
  uninstall   Remove Intent-managed agents
  show        Display detailed agent information
  status      Check agent installation status

Examples:
  intent agents list              # Show all agents
  intent agents install intent    # Install the Intent agent
  intent agents install --all     # Install all available agents
  intent agents sync             # Update modified agents

For help on a specific command:
  intent help agents <command>
EOF
}

# Helper: Check if agent is installed
is_agent_installed() {
  local agent_name="$1"
  [ -f "$HOME/.claude/agents/${agent_name}.md" ]
}

# Helper: Read agent info from manifest
get_agent_info() {
  local manifest="$1"
  local agent_name="$2"
  
  if [ -f "$manifest" ]; then
    jq -r ".agents[] | select(.name == \"$agent_name\")" "$manifest" 2>/dev/null
  fi
}

# List available and installed agents
intent_agents_list() {
  echo "Available Agents:"
  echo ""
  
  # Global agents
  local global_manifest="$INTENT_HOME/agents/.manifest/global-agents.json"
  if [ -f "$global_manifest" ]; then
    echo "Global:"
    
    # Read agent names from manifest
    local agents=$(jq -r '.agents[].name' "$global_manifest" 2>/dev/null)
    
    for agent in $agents; do
      local info=$(jq -r ".agents[] | select(.name == \"$agent\") | .description" "$global_manifest" 2>/dev/null)
      local status=""
      
      if is_agent_installed "$agent"; then
        status=" [INSTALLED]"
      else
        status=" [NOT INSTALLED]"
      fi
      
      printf "  %-12s - %s%s\n" "$agent" "$info" "$status"
    done
  else
    echo "  No global agents found"
  fi
  
  echo ""
  
  # Local agents (if in project)
  if [ -n "${PROJECT_ROOT:-}" ] && [ -d "$PROJECT_ROOT/intent/agents" ]; then
    local local_manifest="$PROJECT_ROOT/intent/agents/.manifest/installed-agents.json"
    if [ -f "$local_manifest" ]; then
      echo "Local (Project-specific):"
      # TODO: Implement local agent listing
      echo "  Local agent support coming soon"
    fi
  fi
  
  # Check for Claude installation
  if [ ! -d "$HOME/.claude" ]; then
    echo ""
    echo "Note: Claude Code not detected. Install Claude Code to use agents."
  fi
}

# Helper: Calculate checksum for a file
calculate_checksum() {
  local file="$1"
  if command -v sha256sum >/dev/null 2>&1; then
    sha256sum "$file" | cut -d' ' -f1
  elif command -v shasum >/dev/null 2>&1; then
    shasum -a 256 "$file" | cut -d' ' -f1
  else
    echo "unknown"
  fi
}

# Helper: Create or update installed agents manifest
update_installed_manifest() {
  local agent_name="$1"
  local source_type="$2"  # global or local
  local source_path="$3"
  
  # Determine manifest location
  local manifest_dir
  local manifest_file
  
  if [ -n "${PROJECT_ROOT:-}" ]; then
    # In a project - use project manifest
    manifest_dir="$PROJECT_ROOT/intent/agents/.manifest"
    manifest_file="$manifest_dir/installed-agents.json"
  else
    # Not in project - use global user manifest
    manifest_dir="$HOME/.intent/agents"
    manifest_file="$manifest_dir/installed-agents.json"
  fi
  
  # Create directory if needed
  mkdir -p "$manifest_dir"
  
  # Initialize manifest if it doesn't exist
  if [ ! -f "$manifest_file" ]; then
    cat > "$manifest_file" << EOF
{
  "version": "1.0.0",
  "installed": []
}
EOF
  fi
  
  # Calculate checksum
  local checksum=$(calculate_checksum "$HOME/.claude/agents/${agent_name}.md")
  local timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
  
  # Remove existing entry if present
  local temp_file=$(mktemp)
  jq "del(.installed[] | select(.name == \"$agent_name\"))" "$manifest_file" > "$temp_file"
  
  # Add new entry
  jq ".installed += [{
    \"name\": \"$agent_name\",
    \"source\": \"$source_type\",
    \"source_path\": \"$source_path\",
    \"installed_at\": \"$timestamp\",
    \"checksum\": \"$checksum\",
    \"modified\": false
  }]" "$temp_file" > "$manifest_file"
  
  rm -f "$temp_file"
}

# Install agents
intent_agents_install() {
  # Check for Claude
  if [ ! -d "$HOME/.claude" ]; then
    echo "Error: Claude Code not detected. Please install Claude Code first."
    echo "Visit: https://claude.ai/download"
    return 1
  fi
  
  # Create agents directory if needed
  mkdir -p "$HOME/.claude/agents"
  
  # Parse arguments
  if [ "$#" -eq 0 ]; then
    echo "Error: No agent specified"
    echo "Usage: intent agents install <agent-name> [agent-name...]"
    echo "       intent agents install --all"
    return 1
  fi
  
  local agents_to_install=()
  local install_all=false
  local force=false
  
  # Check for flags
  for arg in "$@"; do
    if [ "$arg" = "--all" ]; then
      install_all=true
    elif [ "$arg" = "--force" ] || [ "$arg" = "-f" ]; then
      force=true
    else
      agents_to_install+=("$arg")
    fi
  done
  
  # Get list of available agents if --all
  if [ "$install_all" = true ]; then
    local global_manifest="$INTENT_HOME/agents/.manifest/global-agents.json"
    if [ -f "$global_manifest" ]; then
      agents_to_install=($(jq -r '.agents[].name' "$global_manifest" 2>/dev/null))
    fi
  fi
  
  # Install each agent
  local installed_count=0
  local skipped_count=0
  local failed_count=0
  
  for agent in "${agents_to_install[@]}"; do
    echo "Installing agent: $agent"
    
    # Check if agent exists in global manifest
    local agent_path="$INTENT_HOME/agents/$agent/agent.md"
    if [ ! -f "$agent_path" ]; then
      echo "  Error: Agent '$agent' not found"
      ((failed_count++))
      continue
    fi
    
    # Check if already installed
    local target="$HOME/.claude/agents/${agent}.md"
    if [ -f "$target" ]; then
      if [ "$force" = false ]; then
        echo -n "  Agent already exists. Overwrite? [y/N] "
        read -r response
        if [[ ! "$response" =~ ^[Yy]$ ]]; then
          echo "  Skipped"
          ((skipped_count++))
          continue
        fi
      else
        echo "  Agent already exists. Overwriting (--force)"
      fi
    fi
    
    # Copy agent
    if cp "$agent_path" "$target"; then
      echo "  Installed successfully"
      update_installed_manifest "$agent" "global" "$INTENT_HOME/agents/$agent"
      ((installed_count++))
    else
      echo "  Error: Failed to install"
      ((failed_count++))
    fi
  done
  
  # Summary
  echo ""
  echo "Installation complete:"
  echo "  Installed: $installed_count"
  [ "$skipped_count" -gt 0 ] && echo "  Skipped: $skipped_count"
  [ "$failed_count" -gt 0 ] && echo "  Failed: $failed_count"
  
  # Return success if at least one agent was installed or skipped
  if [ "$installed_count" -gt 0 ] || [ "$skipped_count" -gt 0 ]; then
    return 0
  elif [ "$failed_count" -gt 0 ]; then
    return 1
  else
    return 0
  fi
}

# Route commands
case "$1" in
  list)
    shift
    intent_agents_list "$@"
    ;;
  install)
    shift
    intent_agents_install "$@"
    ;;
  sync|uninstall|show|status)
    echo "Error: 'intent agents $1' not yet implemented"
    exit 1
    ;;
  ""|help|-h|--help)
    intent_agents_help
    ;;
  *)
    echo "Error: Unknown command 'intent agents $1'"
    echo "Run 'intent agents help' for usage"
    exit 1
    ;;
esac