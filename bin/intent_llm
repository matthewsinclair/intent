#!/bin/bash
# intent_llm - Manage LLM prompts and context files
# Usage: stp_llm <subcommand> [options]

# Exit on error
set -e

# Function to display error messages
error() {
  echo "Error: $1" >&2
  exit 1
}

# Function to display usage
usage() {
  cat << EOF
Usage: stp llm <subcommand> [options]

LLM-related commands for working with AI assistants.

Subcommands:
  usage_rules    Display the STP usage rules for LLMs

Options for usage_rules:
  --symlink [dir]    Create a symlink to usage-rules.md in current or specified directory

Examples:
  stp llm usage_rules                # Display usage patterns and workflows
  stp llm usage_rules --symlink      # Create symlink in current directory
  stp llm usage_rules --symlink /tmp # Create symlink in /tmp directory

For more information on a specific subcommand, run:
  stp help llm
EOF
}

# Check if STP_HOME is set
if [ -z "$STP_HOME" ]; then
  error "STP_HOME environment variable is not set"
fi

# Check for at least one argument
if [ $# -eq 0 ]; then
  usage
  exit 0
fi

# Get subcommand
SUBCOMMAND="$1"
shift

# Handle subcommands
case "$SUBCOMMAND" in
  usage_rules)
    # Default behavior is to display the file
    USAGE_RULES_FILE="$STP_HOME/stp/eng/usage-rules.md"
    
    # Check if usage-rules.md exists
    if [ ! -f "$USAGE_RULES_FILE" ]; then
      error "Usage rules file not found at: $USAGE_RULES_FILE"
    fi
    
    # Parse options
    if [ $# -eq 0 ]; then
      # No options, just display the file
      cat "$USAGE_RULES_FILE"
    else
      case "$1" in
        --symlink)
          # Determine target directory
          if [ $# -gt 1 ] && [ "$2" != "" ]; then
            # Directory specified
            TARGET_DIR="$2"
          else
            # Use current directory
            TARGET_DIR="."
          fi
          
          # Validate target directory
          if [ ! -d "$TARGET_DIR" ]; then
            error "Target directory does not exist: $TARGET_DIR"
          fi
          
          # Create symlink
          SYMLINK_PATH="$TARGET_DIR/usage-rules.md"
          
          # Check if symlink already exists
          if [ -e "$SYMLINK_PATH" ]; then
            echo "Warning: $SYMLINK_PATH already exists" >&2
            read -p "Overwrite? (y/N) " -n 1 -r
            echo
            if [[ ! $REPLY =~ ^[Yy]$ ]]; then
              echo "Cancelled."
              exit 0
            fi
            rm -f "$SYMLINK_PATH"
          fi
          
          # Create the symlink
          ln -s "$USAGE_RULES_FILE" "$SYMLINK_PATH"
          echo "Created symlink: $SYMLINK_PATH -> $USAGE_RULES_FILE"
          ;;
          
        *)
          error "Unknown option: $1"
          ;;
      esac
    fi
    ;;
    
  --help|-h|help)
    usage
    exit 0
    ;;
    
  *)
    error "Unknown subcommand: $SUBCOMMAND"
    ;;
esac