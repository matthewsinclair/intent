#!/bin/bash
# intent_init - Initialize Intent v2.0.0 project
# Usage: intent init [project_name]

# Exit on error
set -e

# Source common library (but don't load project config - init creates new projects)
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Source helpers for version
if [ -z "$INTENT_HOME" ]; then
  INTENT_HOME="$(cd "$SCRIPT_DIR/.." && pwd)"
fi
if [ -f "$INTENT_HOME/bin/intent_helpers" ]; then
  source "$INTENT_HOME/bin/intent_helpers"
fi

# Get version from centralized source
INTENT_VERSION="$(get_intent_version 2>/dev/null || echo "2.2.1")"

# Function to display error messages
error() {
  echo "Error: $1" >&2
  exit 1
}

# Function to display usage information
usage() {
  echo "Usage: intent init [project_name]"
  echo ""
  echo "Initialize a new Intent v$INTENT_VERSION project in the current directory"
  echo ""
  echo "Arguments:"
  echo "  project_name  Name of the project (optional, defaults to directory name)"
  echo ""
  echo "Example:"
  echo "  intent init \"My Project\""
  exit 1
}

# Parse options
while [[ $# -gt 0 ]]; do
  case "$1" in
    -h|--help)
      usage
      ;;
    -*)
      error "Unknown option: $1"
      ;;
    *)
      # First non-option argument is project name
      break
      ;;
  esac
done

# Get project name (default to current directory name)
PROJECT_NAME="${1:-$(basename "$(pwd)")}"

# Check if already initialized
if [ -f ".intent/config.json" ]; then
  error "This directory is already an Intent project"
fi

# Get author information
AUTHOR="${INTENT_AUTHOR:-${USER:-Unknown}}"
DATE="$(date '+%Y-%m-%d')"

echo "Initializing Intent v2.0.0 project: $PROJECT_NAME"

# Create directory structure
echo "Creating directory structure..."
mkdir -p .intent
mkdir -p intent/{st,docs,llm}
mkdir -p backlog

# Create local configuration
echo "Creating configuration..."
cat > .intent/config.json << EOF
{
  "version": "2.1.0",
  "project_name": "$PROJECT_NAME",
  "author": "$AUTHOR",
  "created": "$DATE",
  "st_prefix": "ST"
}
EOF

# Create version file
cat > .intent/version << EOF
2.0.0
EOF

# Create initial files from templates
echo "Creating initial files..."

# Template directory
TEMPLATE_DIR="${INTENT_HOME}/lib/templates"

# Create work in progress file
if [ -f "$TEMPLATE_DIR/prj/_wip.md" ]; then
  sed -e "s/\[\[PROJECT_NAME\]\]/$PROJECT_NAME/g" \
      -e "s/\[\[AUTHOR\]\]/$AUTHOR/g" \
      -e "s/\[\[DATE\]\]/$DATE/g" \
      "$TEMPLATE_DIR/prj/_wip.md" > "intent/wip.md"
else
  # Create a basic wip.md if template not found
  cat > "intent/wip.md" << EOF
---
verblock: "$DATE:v0.1: $AUTHOR - Initial version"
---
# Work In Progress - $PROJECT_NAME

## Current Focus

[Document your current work here]
EOF
fi

# Create initial documentation
cat > "intent/docs/technical_product_design.md" << EOF
---
verblock: "$DATE:v0.1: $AUTHOR - Initial version"
---
# Technical Product Design - $PROJECT_NAME

## Preamble to Claude

[Add project context and instructions for AI assistants here]

## Overview

[Project overview]

## Architecture

[System architecture]

## Implementation

[Implementation details]
EOF

# Helper function for basic AGENTS.md
_create_basic_agents_md() {
  cat > "intent/llm/AGENTS.md" << EOF
# AGENTS.md

## Project Overview
$PROJECT_NAME - Created by $AUTHOR on $DATE

## Development Environment
### Prerequisites
- [Add your project requirements]

## Build and Test Commands
### Testing
\`\`\`bash
# Add your test commands
\`\`\`

## Code Style Guidelines
- Follow existing patterns in the codebase
- See CLAUDE.md for Intent-specific guidelines

## Intent-Specific Information
See CLAUDE.md for Intent project structure and commands.
EOF
}

# Create AGENTS.md using smart generator
echo "Creating AGENTS.md..."
# Try to use the smart generator if Intent is installed
if [ -n "$INTENT_HOME" ] && [ -f "$INTENT_HOME/intent/plugins/agents/bin/intent_agents" ]; then
  # Call the generator directly
  PROJECT_ROOT="$(pwd)" "$INTENT_HOME/bin/intent" agents generate > "intent/llm/AGENTS.md" 2>/dev/null
  if [ ! -s "intent/llm/AGENTS.md" ]; then
    # Fallback to basic template if generation failed
    _create_basic_agents_md
  fi
else
  # Fallback to basic template
  _create_basic_agents_md
fi

# Create symlink at project root
ln -sf "intent/llm/AGENTS.md" "AGENTS.md"

# Create CLAUDE.md
cat > "CLAUDE.md" << EOF
# $PROJECT_NAME Project Guidelines

This is an Intent v2.0.0 project.

## Project Structure

- \`intent/\` - Project artifacts (steel threads, docs, work tracking)
- \`backlog/\` - Task management (if using Backlog.md)
- \`.intent/\` - Configuration and metadata

## Steel Threads

Steel threads are organized as directories under \`intent/st/\`:
- Each steel thread has its own directory (e.g., ST0001/)
- Minimum required file is \`info.md\` with metadata
- Optional files: design.md, impl.md, tasks.md

## Commands

- \`intent st new "Title"\` - Create a new steel thread
- \`intent st list\` - List all steel threads
- \`intent st show <id>\` - Show steel thread details
- \`intent doctor\` - Check configuration
- \`intent help\` - Get help

## Author

$AUTHOR
EOF

# Initialize git if not already a repository
if [ ! -d .git ]; then
  echo "Initializing git repository..."
  git init
  
  # Create .gitignore
  cat > .gitignore << EOF
# Intent configuration
.intent/cache/

# OS files
.DS_Store
Thumbs.db

# Editor files
*.swp
*~
.vscode/
.idea/
EOF
fi

# Initialize Backlog.md if available
if command -v backlog >/dev/null 2>&1; then
  echo "Initializing Backlog.md..."
  # Pass project name to backlog init to avoid prompt
  echo "$PROJECT_NAME" | backlog init >/dev/null 2>&1 || true
  
  # Configure backlog for Intent
  if [ -f "backlog/.config" ]; then
    echo "task_prefix=ST" >> backlog/.config
    echo "default_status=todo" >> backlog/.config
  fi
fi

# Check for Claude Code and offer agent installation (only in interactive mode)
if [ -t 0 ] && [ -t 1 ]; then  # Check if both stdin and stdout are TTY
  if [ -d "$HOME/.claude" ] || command -v claude >/dev/null 2>&1; then
    echo ""
    echo "Claude Code detected!"
    echo -n "Would you like to install the Intent sub-agent for better Claude integration? [Y/n] "
    read -r response
    
    if [[ "$response" =~ ^[Yy]?$ ]]; then
      echo "Installing Intent agent..."
      if "$SCRIPT_DIR/intent_agents" install intent --force >/dev/null 2>&1; then
        echo "Intent agent installed successfully!"
        echo "Claude will now understand Intent's steel thread methodology."
      else
        echo "Note: Could not install agent automatically."
        echo "You can install it later with: intent agents install intent"
      fi
    else
      echo "You can install agents later with: intent agents list"
    fi
  fi
fi

echo ""
echo "Intent project initialized successfully!"
echo ""
echo "Project: $PROJECT_NAME"
echo "Author: $AUTHOR"
echo "Version: 2.0.0"
echo ""
echo "Next steps:"
echo "  1. Create your first steel thread: intent st new \"Initial Setup\""
echo "  2. Update intent/wip.md with your current focus"
echo "  3. Review CLAUDE.md for project guidelines"
echo ""
echo "For help, run: intent help"