#!/bin/bash
# intent_doctor - Configuration diagnostics and fixes for Intent v2.1.0

# Source the config library if we can find it
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
if [ -f "$SCRIPT_DIR/intent_config" ]; then
  source "$SCRIPT_DIR/intent_config"
  # Load the configuration to set PROJECT_ROOT and other variables
  load_intent_config
elif [ -n "$INTENT_HOME" ] && [ -f "$INTENT_HOME/bin/intent_config" ]; then
  source "$INTENT_HOME/bin/intent_config"
  # Load the configuration to set PROJECT_ROOT and other variables
  load_intent_config
else
  # Fallback - define minimal functions we need
  validate_json() {
    local file=$1
    if [ ! -f "$file" ]; then
      return 1
    fi
    # Use jq if available
    if command -v jq >/dev/null 2>&1; then
      jq . "$file" >/dev/null 2>&1
      return $?
    fi
    # If no jq, just check file exists
    return 0
  }
fi

# Function to display usage
usage() {
  cat << EOF
Usage: intent_doctor [OPTIONS]

Diagnose and fix common Intent configuration issues.

Options:
  -h, --help     Show this help message
  -f, --fix      Attempt to fix issues automatically
  -v, --verbose  Show detailed information
  -q, --quiet    Only show errors and warnings

Examples:
  intent_doctor         # Check for issues
  intent_doctor --fix   # Fix issues automatically

EOF
  exit 0
}

# Parse command line arguments
FIX_MODE=false
VERBOSE=false
QUIET=false

while [[ $# -gt 0 ]]; do
  case $1 in
    -h|--help)
      usage
      ;;
    -f|--fix)
      FIX_MODE=true
      shift
      ;;
    -v|--verbose)
      VERBOSE=true
      shift
      ;;
    -q|--quiet)
      QUIET=true
      shift
      ;;
    *)
      echo "Unknown option: $1" >&2
      echo "Use --help for usage information" >&2
      exit 1
      ;;
  esac
done

# Counters for issues
ERRORS=0
WARNINGS=0
FIXED=0

# Color codes (disabled if not terminal or if quiet)
if [ -t 1 ] && [ "$QUIET" != true ]; then
  RED='\033[0;31m'
  YELLOW='\033[0;33m'
  GREEN='\033[0;32m'
  NC='\033[0m' # No Color
else
  RED=''
  YELLOW=''
  GREEN=''
  NC=''
fi

# Status display functions
show_ok() {
  if [ "$QUIET" != true ]; then
    echo -e "${GREEN}OK${NC}"
  fi
}

show_error() {
  echo -e "${RED}ERROR${NC}: $1"
  ((ERRORS++))
}

show_warning() {
  echo -e "${YELLOW}WARNING${NC}: $1"
  ((WARNINGS++))
}

show_fixed() {
  if [ "$FIX_MODE" = true ]; then
    echo -e "  ${GREEN}FIXED${NC}: $1"
    ((FIXED++))
  fi
}

info() {
  if [ "$QUIET" != true ]; then
    echo "$@"
  fi
}

verbose() {
  if [ "$VERBOSE" = true ] && [ "$QUIET" != true ]; then
    echo "  $@"
  fi
}

# Main doctor function
doctor_check() {
  # Get version from helpers if available
  local version="2.2.1"
  if [ -n "$INTENT_HOME" ] && [ -f "$INTENT_HOME/bin/intent_helpers" ]; then
    source "$INTENT_HOME/bin/intent_helpers"
    version="$(get_intent_version 2>/dev/null || echo "2.2.1")"
  fi
  
  if [ "$QUIET" != true ]; then
    echo "Intent Doctor v$version"
    echo "===================="
    echo ""
  fi
  
  # Check 1: INTENT_HOME
  if [ "$QUIET" != true ]; then
    echo -n "Checking INTENT_HOME... "
  fi
  
  if [ -z "$INTENT_HOME" ]; then
    show_error "Not set"
    if [ "$FIX_MODE" = true ]; then
      echo "  FIX: Please run 'intent_bootstrap' to set up INTENT_HOME"
      echo "       Or set it manually: export INTENT_HOME=/path/to/intent"
    fi
  elif [ ! -d "$INTENT_HOME" ]; then
    show_error "Directory does not exist: $INTENT_HOME"
  else
    show_ok
    verbose "INTENT_HOME=$INTENT_HOME"
  fi
  
  # Check 2: Intent executable
  if [ "$QUIET" != true ]; then
    echo -n "Checking intent executable... "
  fi
  
  INTENT_FOUND=false
  if [ -n "$INTENT_HOME" ]; then
    if [ -f "$INTENT_HOME/bin/intent" ] && [ -x "$INTENT_HOME/bin/intent" ]; then
      INTENT_FOUND=true
      show_ok
      verbose "Found at $INTENT_HOME/bin/intent"
    elif [ -f "$INTENT_HOME/bin/intent_bootstrap" ]; then
      # Bootstrap exists but main intent doesn't
      show_warning "Not found (bootstrap exists)"
      verbose "This is expected during initial setup"
    else
      show_error "Not found or not executable"
    fi
  else
    show_error "Cannot check (INTENT_HOME not set)"
  fi
  
  # Check 3: Global config
  if [ "$QUIET" != true ]; then
    echo -n "Checking global config... "
  fi
  
  GLOBAL_CONFIG="$HOME/.config/intent/config.json"
  if [ -f "$GLOBAL_CONFIG" ]; then
    if validate_json "$GLOBAL_CONFIG"; then
      show_ok
      verbose "Found at $GLOBAL_CONFIG"
      
      # Check for required fields if verbose
      if [ "$VERBOSE" = true ] && command -v jq >/dev/null 2>&1; then
        if jq -e '.intent_version' "$GLOBAL_CONFIG" >/dev/null 2>&1; then
          verbose "Has intent_version field"
        else
          verbose "Missing intent_version field"
        fi
      fi
    else
      show_error "Invalid JSON syntax"
      if [ "$FIX_MODE" = true ]; then
        echo "  Backing up invalid config..."
        mv "$GLOBAL_CONFIG" "$GLOBAL_CONFIG.bak.$(date +%Y%m%d_%H%M%S)"
        if [ -f "$INTENT_HOME/bin/intent_bootstrap" ]; then
          echo "  Running bootstrap to create new config..."
          "$INTENT_HOME/bin/intent_bootstrap" --quiet
          show_fixed "Created new global config"
        else
          echo "  FIX: Run 'intent_bootstrap' to create new config"
        fi
      fi
    fi
  else
    show_warning "Not found"
    if [ "$FIX_MODE" = true ]; then
      if [ -f "$INTENT_HOME/bin/intent_bootstrap" ]; then
        echo "  Running bootstrap to create config..."
        "$INTENT_HOME/bin/intent_bootstrap" --quiet
        show_fixed "Created global config"
      else
        echo "  FIX: Run 'intent_bootstrap' to create config"
      fi
    else
      verbose "Run 'intent_bootstrap' to create global config"
    fi
  fi
  
  # Check 4: Local config (if in a project)
  if [ -n "$PROJECT_ROOT" ]; then
    if [ "$QUIET" != true ]; then
      echo -n "Checking local config... "
    fi
    
    LOCAL_CONFIG="$PROJECT_ROOT/.intent/config.json"
    if [ -f "$LOCAL_CONFIG" ]; then
      if validate_json "$LOCAL_CONFIG"; then
        show_ok
        verbose "Found at $LOCAL_CONFIG"
      else
        show_error "Invalid JSON syntax"
        if [ "$FIX_MODE" = true ]; then
          echo "  FIX: Please fix JSON syntax in $LOCAL_CONFIG"
          echo "       Or remove it to use global config only"
        fi
      fi
    else
      # Check if this is a legacy project
      if [ -f "$PROJECT_ROOT/.stp-config" ] || [ -d "$PROJECT_ROOT/stp" ]; then
        show_warning "Legacy project without intent config"
        verbose "Run 'intent upgrade' to migrate to v2.1.0"
      else
        info "Not found (using global config)"
      fi
    fi
  else
    verbose "Not in a project directory"
  fi
  
  # Check 4b: v2.3.0 features (if in a project with v2.3.0+)
  if [ -n "$PROJECT_ROOT" ] && [ -f "$PROJECT_ROOT/.intent/config.json" ]; then
    # Check version
    local project_version=$(jq -r '.version // "0.0.0"' "$PROJECT_ROOT/.intent/config.json" 2>/dev/null)
    if [[ "$project_version" == "2.3"* ]]; then
      # Check for AGENTS.md
      if [ "$QUIET" != true ]; then
        echo -n "Checking AGENTS.md... "
      fi
      if [ -f "$PROJECT_ROOT/AGENTS.md" ] || [ -f "$PROJECT_ROOT/intent/llm/AGENTS.md" ]; then
        show_ok
        verbose "AGENTS.md found"
      else
        show_warning "Missing AGENTS.md"
        verbose "Run 'intent agents init' to create AGENTS.md"
        if [ "$FIX_MODE" = true ]; then
          echo "  Creating AGENTS.md..."
          (cd "$PROJECT_ROOT" && intent agents init)
          show_fixed "Created AGENTS.md"
        fi
      fi
      
      # Check for plugins config
      if [ "$QUIET" != true ]; then
        echo -n "Checking plugins config... "
      fi
      if jq -e '.plugins' "$PROJECT_ROOT/.intent/config.json" >/dev/null 2>&1; then
        show_ok
        verbose "Plugins configured"
      else
        show_warning "Missing plugins configuration"
        verbose "Configuration may be incomplete from upgrade"
        if [ "$FIX_MODE" = true ]; then
          echo "  Adding plugins configuration..."
          local temp_file=$(mktemp)
          jq '.plugins = {"claude": {"subagents_path": "intent/plugins/claude/subagents"}, "agents": {"config_path": "intent/plugins/agents"}}' "$PROJECT_ROOT/.intent/config.json" > "$temp_file"
          mv "$temp_file" "$PROJECT_ROOT/.intent/config.json"
          show_fixed "Added plugins configuration"
        fi
      fi
    fi
  fi
  
  # Check 5: PATH
  if [ "$QUIET" != true ]; then
    echo -n "Checking PATH... "
  fi
  
  if [ -n "$INTENT_HOME" ]; then
    if echo "$PATH" | grep -q "$INTENT_HOME/bin"; then
      show_ok
      verbose "$INTENT_HOME/bin is in PATH"
    else
      show_warning "$INTENT_HOME/bin not in PATH"
      if [ "$FIX_MODE" = true ]; then
        echo "  FIX: Add to your shell configuration:"
        echo "       export PATH=\"\$INTENT_HOME/bin:\$PATH\""
      fi
    fi
  else
    show_warning "Cannot check (INTENT_HOME not set)"
  fi
  
  # Check 6: Required tools
  if [ "$QUIET" != true ]; then
    echo -n "Checking required tools... "
  fi
  
  # Define tool categories
  REQUIRED_TOOLS="bash sed grep mkdir"
  CRITICAL_TOOLS="jq"  # Separate jq for special handling
  CORE_TOOLS="git cat echo pwd dirname basename date cut tr awk"
  OPTIONAL_TOOLS="backlog bats"
  
  # Check required tools
  MISSING_REQUIRED=""
  for tool in $REQUIRED_TOOLS; do
    if ! command -v "$tool" >/dev/null 2>&1; then
      MISSING_REQUIRED="$MISSING_REQUIRED $tool"
    fi
  done
  
  # Check jq specifically (critical for Intent)
  JQ_MISSING=false
  if ! command -v jq >/dev/null 2>&1; then
    JQ_MISSING=true
    MISSING_REQUIRED="$MISSING_REQUIRED jq"
  fi
  
  if [ -z "$MISSING_REQUIRED" ]; then
    show_ok
    verbose "All required tools found"
  else
    show_error "Missing required tools:$MISSING_REQUIRED"
    echo ""
    
    # Platform-specific installation instructions
    if [ "$(uname)" = "Darwin" ]; then
      echo "  Installation instructions for macOS:"
      if [ "$JQ_MISSING" = true ]; then
        echo "    jq: brew install jq"
        echo "        (Required for JSON config parsing and agent management)"
      fi
      for tool in $MISSING_REQUIRED; do
        if [ "$tool" != "jq" ]; then
          echo "    $tool: brew install $tool"
        fi
      done
    elif [ "$(uname)" = "Linux" ]; then
      echo "  Installation instructions for Linux:"
      if [ "$JQ_MISSING" = true ]; then
        echo "    jq: sudo apt-get install jq  # Debian/Ubuntu"
        echo "        sudo yum install jq      # RedHat/CentOS"
        echo "        sudo pacman -S jq        # Arch"
        echo "        (Required for JSON config parsing and agent management)"
      fi
      for tool in $MISSING_REQUIRED; do
        if [ "$tool" != "jq" ]; then
          echo "    $tool: Usually pre-installed, check your package manager"
        fi
      done
    else
      echo "  Please install missing tools using your system's package manager"
      if [ "$JQ_MISSING" = true ]; then
        echo "  jq is CRITICAL for Intent - configs and agents won't work without it!"
      fi
    fi
    echo ""
  fi
  
  # Check 7: Core tools (non-blocking warnings)
  if [ "$VERBOSE" = true ]; then
    if [ "$QUIET" != true ]; then
      echo -n "Checking core tools... "
    fi
    
    MISSING_CORE=""
    for tool in $CORE_TOOLS; do
      if ! command -v "$tool" >/dev/null 2>&1; then
        MISSING_CORE="$MISSING_CORE $tool"
      fi
    done
    
    if [ -z "$MISSING_CORE" ]; then
      show_ok
      verbose "All core tools found"
    else
      show_warning "Missing core tools:$MISSING_CORE"
      echo "  These tools are used by Intent but may not be critical"
      echo "  Some features might not work without them"
    fi
  fi
  
  # Check 8: Optional tools
  if [ "$QUIET" != true ]; then
    echo -n "Checking optional tools... "
  fi
  
  MISSING_OPTIONAL=""
  OPTIONAL_STATUS=""
  
  # Check for backlog
  if ! command -v backlog >/dev/null 2>&1; then
    MISSING_OPTIONAL="$MISSING_OPTIONAL backlog"
    OPTIONAL_STATUS="${OPTIONAL_STATUS}backlog:NOT_FOUND "
  else
    OPTIONAL_STATUS="${OPTIONAL_STATUS}backlog:OK "
  fi
  
  # Check for bats (testing framework)
  if ! command -v bats >/dev/null 2>&1; then
    MISSING_OPTIONAL="$MISSING_OPTIONAL bats"
    OPTIONAL_STATUS="${OPTIONAL_STATUS}bats:NOT_FOUND "
  else
    OPTIONAL_STATUS="${OPTIONAL_STATUS}bats:OK "
  fi
  
  # Check for checksum tools (for agent management)
  CHECKSUM_TOOL=""
  if command -v sha256sum >/dev/null 2>&1; then
    CHECKSUM_TOOL="sha256sum"
  elif command -v shasum >/dev/null 2>&1; then
    CHECKSUM_TOOL="shasum"
  fi
  
  if [ -z "$CHECKSUM_TOOL" ]; then
    MISSING_OPTIONAL="$MISSING_OPTIONAL checksum"
    OPTIONAL_STATUS="${OPTIONAL_STATUS}checksum:NOT_FOUND "
  else
    OPTIONAL_STATUS="${OPTIONAL_STATUS}checksum:$CHECKSUM_TOOL "
  fi
  
  if [ -z "$MISSING_OPTIONAL" ]; then
    show_ok
    verbose "All optional tools found: $OPTIONAL_STATUS"
  else
    if [ "$QUIET" != true ]; then
      echo "Some missing"
      verbose "Optional tools status: $OPTIONAL_STATUS"
    fi
    
    # Provide installation instructions for optional tools
    if echo "$MISSING_OPTIONAL" | grep -q "backlog"; then
      verbose "Backlog.md: Task management system"
      verbose "  Install: npm install -g backlog-md"
      verbose "  More info: https://github.com/backlog-md/backlog-md"
    fi
    
    if echo "$MISSING_OPTIONAL" | grep -q "bats"; then
      verbose "BATS: Bash testing framework"
      verbose "  Install: npm install -g bats (or brew install bats-core)"
      verbose "  Used for: Running Intent test suite"
    fi
    
    if echo "$MISSING_OPTIONAL" | grep -q "checksum"; then
      verbose "Checksum tool: Required for agent integrity checks"
      verbose "  macOS: shasum is usually pre-installed"
      verbose "  Linux: Install coreutils package"
    fi
  fi
  
  # Check 9: File permissions
  if [ -n "$INTENT_HOME" ] && [ "$VERBOSE" = true ]; then
    if [ "$QUIET" != true ]; then
      echo -n "Checking file permissions... "
    fi
    
    PERM_ISSUES=false
    for file in "$INTENT_HOME"/bin/*; do
      if [ -f "$file" ] && [ ! -x "$file" ]; then
        PERM_ISSUES=true
        verbose "Not executable: $file"
      fi
    done
    
    if [ "$PERM_ISSUES" = false ]; then
      show_ok
    else
      show_warning "Some files not executable"
      if [ "$FIX_MODE" = true ]; then
        chmod +x "$INTENT_HOME"/bin/*
        show_fixed "Made all bin files executable"
      fi
    fi
  fi
  
  # Check 10: Agent system
  if [ "$QUIET" != true ]; then
    echo -n "Checking agent system... "
  fi
  
  # Check for new plugin structure (v2.3.0+)
  if [ -d "$INTENT_HOME/intent/plugins/claude/subagents" ]; then
    # New plugin-based structure
    local subagent_count=0
    if [ -d "$INTENT_HOME/intent/plugins/claude/subagents" ]; then
      subagent_count=$(ls -1 "$INTENT_HOME/intent/plugins/claude/subagents" 2>/dev/null | wc -l)
    fi
    
    show_ok
    verbose "Found $subagent_count available Claude subagents"
    
    # Check if Claude is available
    if [ -d "$HOME/.claude" ]; then
      # Check installed agents manifest
      if [ -f "$HOME/.intent/agents/installed-agents.json" ]; then
        if command -v jq >/dev/null 2>&1; then
          local installed_count=$(jq -r '.agents | length' "$HOME/.intent/agents/installed-agents.json" 2>/dev/null || echo 0)
          verbose "$installed_count Claude subagents installed"
        fi
      fi
    else
      verbose "Claude Code not detected - subagents not active"
    fi
  elif [ -d "$INTENT_HOME/agents" ]; then
    # Legacy agent structure (pre-v2.3.0)
    # Check manifest
    if [ -f "$INTENT_HOME/agents/.manifest/global-agents.json" ]; then
      # Check if jq is available for agent operations
      if ! command -v jq >/dev/null 2>&1; then
        show_warning "Cannot validate (jq not installed)"
        echo "  Agent system requires jq for JSON parsing"
        echo "  Install jq to enable agent management features"
      else
        # Validate manifest
        if validate_json "$INTENT_HOME/agents/.manifest/global-agents.json"; then
          AGENT_COUNT=$(jq -r '.agents | length' "$INTENT_HOME/agents/.manifest/global-agents.json" 2>/dev/null || echo 0)
          show_ok
          verbose "Found $AGENT_COUNT available agents (legacy structure)"
          verbose "Consider upgrading Intent to v2.3.0+ for new plugin architecture"
          
          # Check if Claude is available
          if [ -d "$HOME/.claude" ]; then
            # Run quick agent status check
            if command -v "$INTENT_HOME/bin/intent_agents" >/dev/null 2>&1; then
              AGENT_STATUS=$("$INTENT_HOME/bin/intent_agents" status 2>&1 | grep -E "(OK|MISSING|ERROR)" | wc -l)
              if [ "$AGENT_STATUS" -gt 0 ]; then
                verbose "Installed agents detected (run 'intent agents status' for details)"
              fi
            fi
          else
            verbose "Claude Code not detected - agents not active"
          fi
        else
          show_warning "Invalid agent manifest"
          if [ "$FIX_MODE" = true ]; then
            echo "  FIX: Please reinstall Intent to fix agent manifest"
          fi
        fi
      fi
    else
      show_warning "Agent manifest missing"
      verbose "Expected: $INTENT_HOME/agents/.manifest/global-agents.json"
    fi
  else
    if [ "$QUIET" != true ]; then
      echo "Not available"
    fi
    verbose "Agents directory not found (may be older Intent version)"
  fi
  
  # Summary
  if [ "$QUIET" != true ]; then
    echo ""
    echo "Summary:"
    echo "  Errors: $ERRORS"
    echo "  Warnings: $WARNINGS"
    if [ "$FIX_MODE" = true ]; then
      echo "  Fixed: $FIXED"
    fi
    echo ""
    
    if [ $ERRORS -eq 0 ] && [ $WARNINGS -eq 0 ]; then
      echo -e "${GREEN}✓ All checks passed!${NC}"
    elif [ $ERRORS -eq 0 ]; then
      echo -e "${YELLOW}⚠ Some warnings found but no errors${NC}"
    else
      echo -e "${RED}✗ Issues found that need attention${NC}"
      if [ "$FIX_MODE" != true ]; then
        echo ""
        echo "Run 'intent_doctor --fix' to attempt automatic fixes"
      fi
    fi
  fi
  
  # Exit with appropriate code
  if [ $ERRORS -gt 0 ]; then
    exit 1
  elif [ $WARNINGS -gt 0 ]; then
    exit 0  # Warnings don't cause failure
  else
    exit 0
  fi
}

# Run the doctor check
doctor_check