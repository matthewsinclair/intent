name: Intent Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-linux:
    name: Test on Ubuntu
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for proper testing
    
    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install bats-core
      run: |
        # Install bats from package manager
        sudo apt-get update
        sudo apt-get install -y bats
        # Make sure bats is in PATH
        echo "PATH=$PATH:/usr/bin" >> $GITHUB_ENV
        which bats
    
    - name: Install Backlog.md
      run: |
        npm install -g backlog.md
        backlog --version || echo "Backlog installation status: $?"
    
    - name: Make scripts executable
      run: |
        chmod +x bin/*
        chmod +x tests/*.sh 2>/dev/null || true
    
    - name: Install bats libraries manually
      run: |
        mkdir -p tests/lib
        [ ! -d "tests/lib/bats-support" ] && git clone https://github.com/bats-core/bats-support.git tests/lib/bats-support
        [ ! -d "tests/lib/bats-assert" ] && git clone https://github.com/bats-core/bats-assert.git tests/lib/bats-assert
        [ ! -d "tests/lib/bats-file" ] && git clone https://github.com/bats-core/bats-file.git tests/lib/bats-file
    
    - name: Run unit tests
      run: |
        cd tests
        export BATS_LIB_PATH="$PWD/lib"
        if [ -f "./run_tests.sh" ]; then
          ./run_tests.sh
        else
          # Run tests directly if run_tests.sh doesn't exist
          for test_dir in */; do
            if [ -d "$test_dir" ] && [ "$test_dir" != "lib/" ] && [ "$test_dir" != "integration/" ]; then
              echo "Running tests in $test_dir"
              for test_file in "$test_dir"/*test*.bats; do
                if [ -f "$test_file" ]; then
                  echo "  Running: $test_file"
                  bats "$test_file" || true
                fi
              done
            fi
          done
        fi
    
    - name: Run integration tests
      run: |
        cd tests
        export BATS_LIB_PATH="$PWD/lib"
        echo "Running integration tests..."
        if [ -f "integration/end_to_end.bats" ]; then
          bats integration/end_to_end.bats || echo "Integration tests completed with status: $?"
        else
          echo "No integration tests found"
        fi

  test-macos:
    name: Test on macOS
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for proper testing
    
    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install bats-core
      run: |
        # Install bats with Homebrew
        brew install bats-core
        # Make sure bats is in PATH
        echo "PATH=$PATH:/usr/local/bin:/opt/homebrew/bin" >> $GITHUB_ENV
        which bats
    
    - name: Install Backlog.md
      run: |
        npm install -g backlog.md
        backlog --version || echo "Backlog installation status: $?"
    
    - name: Set up test environment
      run: |
        cd tests
        if [ -f "setup_test_env.sh" ]; then
          chmod +x setup_test_env.sh
          ./setup_test_env.sh
        else
          # Manual setup if script doesn't exist
          mkdir -p lib
          [ ! -d "lib/bats-support" ] && git clone https://github.com/bats-core/bats-support.git lib/bats-support
          [ ! -d "lib/bats-assert" ] && git clone https://github.com/bats-core/bats-assert.git lib/bats-assert
          [ ! -d "lib/bats-file" ] && git clone https://github.com/bats-core/bats-file.git lib/bats-file
        fi
    
    - name: Make scripts executable
      run: |
        chmod +x bin/*
        chmod +x tests/*.sh 2>/dev/null || true
    
    - name: Run tests
      run: |
        cd tests
        export BATS_LIB_PATH="$PWD/lib"
        if [ -f "./run_tests.sh" ]; then
          chmod +x run_tests.sh
          ./run_tests.sh
        else
          # Run tests directly
          for test_dir in */; do
            if [ -d "$test_dir" ] && [ "$test_dir" != "lib/" ]; then
              echo "Running tests in $test_dir"
              for test_file in "$test_dir"/*test*.bats; do
                if [ -f "$test_file" ]; then
                  echo "  Running: $test_file"
                  bats "$test_file" || true
                fi
              done
            fi
          done
        fi

  shellcheck:
    name: Shell Script Analysis
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run ShellCheck
      run: |
        echo "Running ShellCheck on Intent scripts..."
        # Run shellcheck on all shell scripts, but don't fail the build
        find bin -type f -name "intent*" | while read -r script; do
          if file "$script" | grep -q "shell script"; then
            echo "Checking: $script"
            shellcheck "$script" || echo "  ShellCheck found issues (non-blocking)"
          fi
        done
        echo "ShellCheck analysis completed"

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test-linux, test-macos]
    if: always()
    
    steps:
    - name: Summary
      run: |
        echo "## Test Summary"
        echo "All test jobs have completed."
        echo "Check individual job results above for details."
        
        # Check job results
        if [ "${{ needs.test-linux.result }}" == "success" ] && [ "${{ needs.test-macos.result }}" == "success" ]; then
          echo "✅ All tests passed!"
        else
          echo "❌ Some tests failed. Please review the logs."
          exit 1
        fi